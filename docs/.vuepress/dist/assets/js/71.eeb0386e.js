(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{670:function(t,s,e){"use strict";e.r(s);var n=e(8),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"docker入门学习笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker入门学习笔记"}},[t._v("#")]),t._v(" Docker入门学习笔记")]),t._v(" "),e("blockquote",[e("p",[t._v("从事前端开发这么几年来，过去一直专注于项目的业务开发，对于项目编译完成后的部署流程一直处于一知半解的状态，而Docker作为这几年项目自动化部署的热门技术，我一直以来都想好好花时间学习一下~ 所以最近花了一些时间整理了这篇笔记，梳理下我的Docker入门之路~")])]),t._v(" "),e("h2",{attrs:{id:"部署流程发展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署流程发展"}},[t._v("#")]),t._v(" 部署流程发展")]),t._v(" "),e("ol",[e("li",[t._v("无虚拟机时代")])]),t._v(" "),e("p",[t._v("第一步肯定是先要准备一台"),e("strong",[t._v("物理服务器")]),t._v("，然后在物理服务器上安装一个"),e("strong",[t._v("操作系统")]),t._v("(Operating System)，有了操作系统之后，便在操作系统上安装运行我们的"),e("strong",[t._v("应用程序")]),t._v("。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),e("ul",[e("li",[t._v("部署非常慢：因为我们得先准备硬件服务器，接着还要安装操作系统，然后再部署应用程序，而且应用程序还有很多的依赖软件，所以这个过程是比较慢的。")]),t._v(" "),e("li",[t._v("成本非常高：主要是物理器成本太高，即使是部署一个简单的应用，也需要一台服务器。")]),t._v(" "),e("li",[t._v("资源浪费：如果应用太简单，也容易浪费硬件资源，比如CPU和内存")])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("虚拟机部署")])]),t._v(" "),e("p",[t._v("虚拟机（VM, virtual machine）允许我们在一台物理计算机模拟出多台机器,简单地理解，虚拟化技术就是"),e("strong",[t._v("在一台物理计算机上，通过中间虚拟软件层Hypervisor隔离CPU、内存等硬件资源，虚拟出多台虚拟服务器")]),t._v("。这样做的话，一台物理服务器便可以安装多个应用程序，达到资源利用的最大化，而且多个应用之间相互隔离。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("优点")]),t._v(" "),e("ul",[e("li",[t._v("可以把资源分配到不同的虚拟机，达到硬件资源的最大化利用")]),t._v(" "),e("li",[t._v("与直接在物理机上部署应用，虚拟机更容易扩展应用。")]),t._v(" "),e("li",[t._v("云服务:通过虚拟机虚拟出不同的物理资源，可以快速搭建云服务。")])])]),t._v(" "),e("ul",[e("li",[t._v("缺点")])]),t._v(" "),e("blockquote",[e("p",[t._v("虚拟机的不足之处在于对物理服务器资源的消耗，当我们在物理服务器创建一台虚拟机时，便需要虚拟出一套硬件并在上面运行完整的操作系统，每台虚拟机都占用许多的服务器资源。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Docker部署")])]),t._v(" "),e("blockquote",[e("p",[t._v("Docker 是使用时下很火的 Golang 语言进行开发的，其技术核心是 Linux 内核的 Cgroup,Namespace 和 AUFS 类的 Union FS 等技术，这些技术都是 Linux 内核中早已存在很多年的技术，所以严格来说 Docker 并不是一个完全创新的技术，Docker 通过这些底层的 Linux 技术，对 Linux 进程进行封装隔离，而被隔离的进程也被称为容器，完全独立于宿主机的进程。")])]),t._v(" "),e("p",[t._v("Docker是"),e("strong",[t._v("容器")]),t._v("技术的一种实现，也是操作系统层面的一种虚拟化，与虚拟机通过一套硬件再安装操作系统完全不同。")]),t._v(" "),e("p",[t._v("相对于虚拟机的笨重，Docker则更显得轻量化，因此不会占用太多的系统资源。")]),t._v(" "),e("h2",{attrs:{id:"虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机"}},[t._v("#")]),t._v(" 虚拟机")]),t._v(" "),e("p",[t._v("虚拟机 Virtual Machine 指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。在实体计算机中能够完成的工作在虚拟机中都能够实现。")]),t._v(" "),e("p",[t._v("VM允许将操作系统安装在仿真的硬件环境中。从本质上讲，它是在你的PC上运行的PC。")]),t._v(" "),e("blockquote",[e("p",[t._v("从理论上讲，可以使用你的应用程序及其所有依赖项来创建Linux（或其他）VM。VM只是数据：可以将其复制并在任何实际的Windows，macOS或Linux设备上运行。每个开发人员以及实时服务器都可以运行相同的环境。")])]),t._v(" "),e("p",[t._v("在计算机中创建虚拟机时，需要将实体机的部分硬盘和内存容量作为虚拟机的硬盘和内存容量。每个虚拟机都有独立的 CMOS、硬盘和操作系统，可以像使用实体机一样对虚拟机进行操作。在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表，是 VMWare 和 OpenStack。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),e("ul",[e("li",[t._v("VM磁盘映像很大，难以复制")]),t._v(" "),e("li",[t._v("单个VM可以自动更新，也可以由单个开发人员更新，因此与其他VM不同步")]),t._v(" "),e("li",[t._v("一个VM需要大量的计算资源：它是一个完整的OS，在另一个OS内的仿真硬件上运行。")])])]),t._v(" "),e("h3",{attrs:{id:"linux-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-容器"}},[t._v("#")]),t._v(" Linux 容器")]),t._v(" "),e("p",[t._v("由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术："),e("strong",[t._v("Linux 容器（Linux Containers，缩写为 LXC）")]),t._v("。")]),t._v(" "),e("p",[e("strong",[t._v("Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。")])]),t._v(" "),e("ol",[e("li",[t._v("随处运行：容器可以将代码与配置文件和相关依赖库进行打包，从而确保在任何环境下的运行都是一致的。")]),t._v(" "),e("li",[t._v("高资源利用率："),e("strong",[t._v("容器提供进程级的隔离")]),t._v("，因此可以更加精细地设置 CPU 和内存的使用率，进而更好地利用服务器的计算资源。")]),t._v(" "),e("li",[t._v("快速扩展：每个容器都可作为单独的进程予以运行，并且可以共享底层操作系统的系统资源，这样一来可以加快容器的启动和停止效率。")])]),t._v(" "),e("blockquote",[e("p",[t._v("容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。")])]),t._v(" "),e("ul",[e("li",[t._v("区别")])]),t._v(" "),e("ol",[e("li",[t._v("虚拟机虽然可以隔离出很多「子电脑」，但占用空间更大，启动更慢。虚拟机软件可能还要花钱，例如VMWare；")]),t._v(" "),e("li",[t._v("容器技术不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境，类似「沙箱」；")]),t._v(" "),e("li",[t._v("运行空间，虚拟机一般要几 GB 到 几十 GB 的空间，而容器只需要 MB 级甚至 KB 级；")])]),t._v(" "),e("h3",{attrs:{id:"安装虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装虚拟机"}},[t._v("#")]),t._v(" 安装虚拟机")]),t._v(" "),e("p",[t._v("跨平台 VM 选项包括"),e("a",{attrs:{href:"https://www.vmware.com/cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("VMware"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.virtualbox.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VirtualBox"),e("OutboundLink")],1),t._v("和"),e("a",{attrs:{href:"https://www.parallels.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parallels Desktop"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("virtualbox官方下载"),e("OutboundLink")],1)]),t._v(" "),e("blockquote",[e("p",[t._v("看自己电脑配置，我选择的 "),e("code",[t._v("Mac OS X Apple Silicon (Beta 4 Release)")])])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/608044681",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parallels Desktop还是VMware Fusion？在Mac上使用Windows"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.zhihu.com/question/20677363",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parallels Desktop 和 VMware Fusion 哪个更好用？ 有别的推荐吗？"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),e("blockquote",[e("p",[t._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。")])]),t._v(" "),e("p",[t._v("Docker 相比于传统虚拟机的技术来说先进了不少，具体表现在 "),e("strong",[t._v("Docker 不是在宿主机上虚拟出一套硬件后再虚拟出一个操作系统，而是让 Docker 容器里面的进程直接运行在宿主机上")]),t._v("（Docker 会做文件、网络等的隔离），这样一来 Docker 会 “体积更轻、跑的更快、同宿主机下可创建的个数更多”。")]),t._v(" "),e("blockquote",[e("p",[t._v("Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.docker.com/get-started/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker官网"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("docker 的"),e("a",{attrs:{href:"https://docs.docker.com/get-started/overview/#docker-architecture",target:"_blank",rel:"noopener noreferrer"}},[t._v("架构图"),e("OutboundLink")],1),t._v("如下:")]),t._v(" "),e("img",{attrs:{src:t.$withBase("/images/more/docker04.svg"),width:"auto"}}),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker client")]),t._v(": 即 docker 命令行工具")]),t._v(" "),e("li",[e("code",[t._v("docker host")]),t._v(": 宿主机，"),e("code",[t._v("docker daemon")]),t._v(" 的运行环境服务器")]),t._v(" "),e("li",[e("code",[t._v("docker daemon")]),t._v(": docker 的守护进程，"),e("code",[t._v("docker client")]),t._v(" 通过命令行与 "),e("code",[t._v("docker daemon")]),t._v(" 交互")]),t._v(" "),e("li",[e("code",[t._v("image")]),t._v(": 镜像，可以理解为一个容器的模板，通过一个镜像可以创建多个容器")]),t._v(" "),e("li",[e("code",[t._v("container")]),t._v(": 最小型的一个操作系统环境，可以对各种服务以及应用容器化，是镜像的运行实例")]),t._v(" "),e("li",[e("code",[t._v("registry")]),t._v(": 镜像仓库，存储大量镜像，可以从镜像仓库拉取和推送镜像")])])]),t._v(" "),e("p",[t._v("Docker 技术的三大核心概念，分别是："),e("strong",[t._v("镜像 Image、容器 Container、仓库 Repository")]),t._v("。")]),t._v(" "),e("p",[t._v("Docker本质上是一个运行在Linux操作系统上的应用，而Linux操作系统分为内核和用户空间，无论是Centos还是Ubuntu，都是在启动内核之后，通过挂载"),e("code",[t._v("Root文件系统")]),t._v("来提供用户空间的,而"),e("strong",[t._v("Docker镜像就是一个Root文件系统")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"image镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#image镜像"}},[t._v("#")]),t._v(" Image镜像")]),t._v(" "),e("p",[t._v("Docker 的镜像可以简单的类比为电脑装系统用的系统盘，包括操作系统，以及必要的软件。例如，一个镜像可以包含一个完整的 "),e("code",[t._v("centos")]),t._v(" 操作系统环境，并安装了 "),e("code",[t._v("Nginx")]),t._v(" 和 "),e("code",[t._v("Tomcat")]),t._v(" 服务器。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意的是，镜像是只读的。这一点也很好理解，就像我们刻录的系统盘其实也是可读的。我们可以使用 "),e("code",[t._v("docker images")]),t._v(" 来查看本地镜像列表。")])]),t._v(" "),e("blockquote",[e("p",[t._v("镜像是一个可执行包，其包含运行应用程序所需的代码、运行时、库、环境变量和配置文件，"),e("strong",[t._v("容器是镜像的运行时实例")]),t._v("。镜像是一个静态的概念，不包含任何动态数据，其内容在构建之后也不会被改变。")])]),t._v(" "),e("p",[t._v("开发者可以将自己的应用打包在自己的镜像里面，然后迁移到其他平台的 Docker 中。镜像中可以存放你自己自定义的运行环境，文件，代码，设置等等内容，再也不用担心环境造成的运行问题。镜像共享运行机器的系统内核。")]),t._v(" "),e("blockquote",[e("p",[t._v("同样， Docker 也支持跨平台。你的镜像也可以加载在 Windows 和 Linux，实现快速运行和部署。")])]),t._v(" "),e("h3",{attrs:{id:"container容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#container容器"}},[t._v("#")]),t._v(" Container容器")]),t._v(" "),e("p",[t._v("Docker 的容器可以简单理解为提供了系统硬件环境，它是真正跑项目程序、消耗机器资源、提供服务的东西。例如，我们可以暂时把容器看作一个 Linux 的电脑，它可以直接运行。那么，容器是基于镜像启动的，并且每个容器都是相互隔离的。注意的是，容器在启动的时候基于镜像创建一层可写层作为最上层。我们可以使用 "),e("code",[t._v("docker ps -a")]),t._v(" 查看本地运行过的容器。")]),t._v(" "),e("blockquote",[e("p",[t._v("容器的存在离不开镜像的支持，他是镜像运行时的一个载体（类似于实例和类的关系）。依托 Docker 的虚拟化技术，给容器创建了独立的端口、进程、文件等“空间”，Container 就是一个与宿机隔离 “容器”。容器可宿主机之间可以进行 port、volumes、network 等的通信。")])]),t._v(" "),e("p",[t._v("Docker的镜像是用于生成容器的模板，镜像分层的，镜像与容器的关系，就是面向对象编程中类与对象的关系，我们定好每一个类，然后使用类创建对象，对应到Docker的使用上，则是构建好每一个镜像，然后使用镜像创建我们需要的容器。")]),t._v(" "),e("blockquote",[e("p",[t._v("容器就是一个不错的解决方案，容器能成为开发与运维之间沟通的语言，因为容器就像一个集装箱一样，提供了软件运行的最小化环境，将应用与其需要的环境一起打包成为镜像，便可以在开发与运维之间沟通与传输。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("注：")]),t._v(" "),e("p",[t._v("Docker 的镜像就是它的文件系统，一个镜像可以放在另外一个镜像的上层，那么位于下层的就是它的父镜像。所以，Docker 会存在很多镜像层，每个镜像层都是只读的，并且不会改变。当我们创建一个新的容器时，Docker 会构建出一个镜像栈，并在栈的最顶层添加一个读写层。")])]),t._v(" "),e("img",{attrs:{src:t.$withBase("/images/more/docker03.png"),width:"auto"}}),t._v(" "),e("h3",{attrs:{id:"repository仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#repository仓库"}},[t._v("#")]),t._v(" Repository仓库")]),t._v(" "),e("blockquote",[e("p",[t._v("构建镜像完成之后，可以在本地运行镜像，生成容器，但如何在更多的服务器运行镜像呢？很明显，这时候我们需要一个可以让我们集中存储和分发镜像的服务，就像Github可以让我们自己存储和分发代码一样。")])]),t._v(" "),e("p",[e("strong",[t._v("Docker 的仓库用于存放镜像")]),t._v("。这一点，和 Git 非常类似。我们可以从中心仓库下载镜像，也可以从自建仓库下载。同时，我们可以把制作好的镜像 "),e("code",[t._v("commit")]),t._v(" 到本地，然后 "),e("code",[t._v("push")]),t._v(" 到远程仓库。")]),t._v(" "),e("p",[t._v("Docker Hub就是Docker提供用于存储和分布镜像的官方Docker Registry，也是默认的Registry，前面我们使用"),e("code",[t._v("docker pull")]),t._v("命令便从"),e("code",[t._v("Docker Hub")]),t._v("上拉取镜像。")]),t._v(" "),e("blockquote",[e("p",[t._v("仓库分为公开仓库和私有仓库，最大的公开仓库是官方仓库"),e("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Dock Hub"),e("OutboundLink")],1),t._v("，国内的公开仓库也有很多选择，例如"),e("a",{attrs:{href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云"),e("OutboundLink")],1),t._v("等。")])]),t._v(" "),e("h3",{attrs:{id:"docker的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker的优点"}},[t._v("#")]),t._v(" Docker的优点")]),t._v(" "),e("p",[t._v("Docker 的优势在于 快速，轻量，灵活。开发者可以制作一个自己自定义的镜像，也可以使用官方或者其他开发者的镜像来启动一个服务。通过将镜像创建为容器，容器之间相互隔离资源和进程不冲突。但硬件资源又是共享的。 创建的镜像也可以通过文件快速分享，也可以上传到镜像库进行存取和管理。同时 Docker 的镜像有 "),e("code",[t._v("分层策略")]),t._v(" ，每次对镜像的更新操作，都会堆叠一个新层。当你拉取 / 推送新版本镜像时，只推送 / 拉取修改的部分。大大加快了镜像的传输效率。")]),t._v(" "),e("blockquote",[e("p",[t._v("Docker 贯穿 CI/CD 中整个流程。作为应用服务的载体有着非常重要的地位。我们可以使用 Docker 将应用打包成一个镜像，交给 Kubernetes 去部署在目标服务集群。并且可以将镜像上传到自己的镜像仓库，做好版本分类处理。")])]),t._v(" "),e("p",[t._v("Docker 技术使用 Linux 内核和内核功能（例如 Cgroups 和 namespaces）来分隔进程，以便各进程相互独立运行。")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("多环境的部署切换")])])]),t._v(" "),e("p",[t._v("业务开发中往往需要区分开发环境与线上环境，利用 Docker 能"),e("strong",[t._v("原封不动的将开发环境中的代码与环境原封不动无污染的迁移到线上环境")]),t._v("，配合一定的自动化流程即可实现自动的发布。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[t._v("前端云构建")])])]),t._v(" "),e("p",[t._v("因为 "),e("code",[t._v("node_modules")]),t._v(" 的蛋疼问题，同一个仓库下不同人开发往往会遇到不同的人使用不同的 包版本 且自己根本不知道与别人不一样，最终导致发布之后产生线上问题。利用 Docker 可以在云端新建容器，远程 "),e("strong",[t._v("无污染、低成本")]),t._v(" 构建代码，实现 "),e("strong",[t._v("不同人用的一定是同一个版本")]),t._v("。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[t._v("复杂环境一键配置")])])]),t._v(" "),e("p",[t._v("某些场景下可能会配一些超级复杂的环境，这个时候可以利用 Docker 对环境配置做封装，直接生成镜像，让大家低成本使用。")]),t._v(" "),e("h3",{attrs:{id:"docker-vs-传统虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-vs-传统虚拟机"}},[t._v("#")]),t._v(" Docker vs 传统虚拟机")]),t._v(" "),e("p",[t._v("Docker 相比于传统虚拟机的技术来说先进了不少，具体表现在 Docker 不是在宿主机上虚拟出一套硬件后再虚拟出一个操作系统，而是让 Docker 容器里面的进程直接运行在宿主机上（Docker 会做文件、网络等的隔离），这样一来 Docker 会 “体积更轻、跑的更快、同宿主机下可创建的个数更多”。")]),t._v(" "),e("p",[t._v("Docker是在操作系统进程层面的隔离，而虚拟机是在物理资源层面的隔离，两者完全不同。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("特性")]),t._v(" "),e("th",[t._v("Docker")]),t._v(" "),e("th",[t._v("虚拟机")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("启动速度")]),t._v(" "),e("td",[t._v("秒级")]),t._v(" "),e("td",[t._v("分钟级")])]),t._v(" "),e("tr",[e("td",[t._v("交付/部署")]),t._v(" "),e("td",[t._v("开发、测试、生产环境一致")]),t._v(" "),e("td",[t._v("无成熟体系")])]),t._v(" "),e("tr",[e("td",[t._v("性能")]),t._v(" "),e("td",[t._v("近似物理机")]),t._v(" "),e("td",[t._v("性能损耗大")])]),t._v(" "),e("tr",[e("td",[t._v("体量")]),t._v(" "),e("td",[t._v("极小（MB）")]),t._v(" "),e("td",[t._v("较大（GB）")])]),t._v(" "),e("tr",[e("td",[t._v("系统支持量")]),t._v(" "),e("td",[t._v("单机支持上千个容器")]),t._v(" "),e("td",[t._v("一般为几十个")])]),t._v(" "),e("tr",[e("td",[t._v("迁移/扩展")]),t._v(" "),e("td",[t._v("跨平台，可复制")]),t._v(" "),e("td",[t._v("较为复杂")])])])]),t._v(" "),e("p",[e("strong",[t._v("Q: Docker 轻量级的原因？")])]),t._v(" "),e("blockquote",[e("p",[t._v("当我们请求 Docker 运行容器时，Docker 会在计算机上设置一个资源隔离的环境。然后将打包的应用程序和关联的文件复制到 Namespace 内的文件系统中，此时环境的配置就完成了。之后 Docker 会执行我们预先指定的命令，运行应用程序。")])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：镜像不包含任何动态数据，其内容在构建之后也不会被改变。")])]),t._v(" "),e("p",[e("strong",[t._v("Q:  Docker 如何在 macOS 或 Windows 上运行？")])]),t._v(" "),e("blockquote",[e("p",[t._v("由于 Namespace 和 Cgroups 功能仅在 Linux 上可用，因此容器无法在其他操作系统上运行。那么 Docker 如何在 macOS 或 Windows 上运行？ Docker 实际上使用了一个技巧，并在非 Linux 操作系统上安装 Linux 虚拟机，然后在虚拟机内运行容器。")])]),t._v(" "),e("p",[e("strong",[t._v("Q: 为什么要使用Docker?")])]),t._v(" "),e("blockquote",[e("p",[t._v("例如，原来我们存在三个环境：开发（日常）环境、测试环境、生产环境。这里，我们对于每个环境都需要部署相同的软件、脚本和运行程序。事实上，对于启动脚本内容都是一致的，但是没有统一维护，经常会出问题。此外，对于运行程序而言，如果所依赖的底层运行环境不一致，也会造成困扰和异常。")])]),t._v(" "),e("blockquote",[e("p",[t._v("现在，我们通过引入 Docker 之后，我们只需要维护一个 Docker 镜像。换句话说，"),e("strong",[t._v("多套环境，一个镜像，实现系统级别的一次构建到处运行")]),t._v("。此时，我们把运行脚本标准化了，把底层软件镜像化了，然后对于相同的将要部署的程序实行标准化部署。因此，Docker 为我们提供了一个标准化的运维模式，并固化运维步骤和流程。")])]),t._v(" "),e("blockquote",[e("p",[t._v("通过这个流程的改进，我们更容易实现 DevOps 的目标，因为我们的镜像生成后可以跑在任何系统，并快速部署。此外，使用 Docker 的很大动力是基于 Docker 实现弹性调度，以更充分地利用机器资源，节省成本。")])]),t._v(" "),e("h3",{attrs:{id:"docker的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker的安装"}},[t._v("#")]),t._v(" Docker的安装")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("注册账号："),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("hub.docker.com"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("安装："),e("a",{attrs:{href:"https://docs.docker.com/desktop/install/mac-install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Install Docker Desktop on Mac"),e("OutboundLink")],1)])])]),t._v(" "),e("blockquote",[e("p",[t._v("安装完后在终端输入"),e("code",[t._v("docker")]),t._v("，展示使用说明，或输入"),e("code",[t._v("docker -v")]),t._v("展示版本信息，则表示 "),e("code",[t._v("docker")]),t._v(" 安装成功~")])]),t._v(" "),e("h3",{attrs:{id:"docker常见命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker常见命令"}},[t._v("#")]),t._v(" Docker常见命令")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/cli/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Use the Docker command line"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"基础操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础操作"}},[t._v("#")]),t._v(" 基础操作")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login -u "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -p "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("password"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登录 Docker Hub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" verion "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印docker的版本信息")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有镜像, 或：docker image ls")]),t._v("\n/**\nREPOSITORY              TAG       IMAGE ID       CREATED             SIZE\nverneyzhou/nginx-test   v1        110b1afbac5a   About an hour ago   414MB\nnginx                   latest    2002d33a54f7   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" weeks ago         192MB\nhello-world             latest    b038788ddb22   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" months ago        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(".14kB\n */\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# REPOSITORY：仓库名称。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TAG： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IMAGE ID ：镜像唯一ID。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CREATED ：创建时间。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SIZE ：镜像大小。")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull centos  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取nginx镜像, 相当于 docker pull centos:latest， 或 docker pull registry.hub.docker.com/centos:latest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker pull命令的完整写法如下：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("选项"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Docker Registry 地址"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":端口号"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("仓库名"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":标签"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取一个镜像，需要指定Docker Registry的地址和端口号，默认是Docker Hub，还需要指定仓库名和标签，仓库名和标签唯一确定一个镜像，而标签是可能省略，如果省略，则默认使用latest作为标签名，另外，仓库名则由作者名和软件名组成。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull mysql/mysql-server:latest  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取非官方的第三方镜像，则需要指定完整仓库名")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" image_name/image_id "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  删除镜像，image_name表示镜像名，image_id表示镜像id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi image_name/image_id "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除镜像快捷命令")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect image_name  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看镜像信息")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t username/image_name:tag_name  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建 Docker 镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push username/image_name  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  要将镜像推送到 Docker Hub")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器相关")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker create [OPTIONS] IMAGE [COMMAND] [ARG...]： 通过镜像去创建一个容器，同时吐出容器 id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" create --name containerName ubuntu:18.04\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run [OPTIONS] [imageName][tag] [COMMAND] [ARG...]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -it --name containerName ubuntu:18.04 /bin/bash "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并运行一个容器，然后进入该容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run 等于  docker create + docker start")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start container_id  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动一个已经停止运行的容器, container_id表示容器的id; Docker 容器重启后会沿用 docker run 命令指定的参数来运行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop container_id "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止正在运行的容器, container_id表示容器的id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" restart container_id   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启一个容器")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地所有容器 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看运行中的镜像，或： docker ps")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" container_id  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除容器（运行中的容器，应该先停止，再删除）, container_id表示容器id,通过docker ps可以看到容器id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker rm container_id # 同上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -q"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container prune "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有退出的容器")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it container_id "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器,container_id表示容器的id,command表示linux命令,如 /bin/bash")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it c40251c943ff "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器c40251c943ff，并打开一个 shell")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("whoami")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器后可查看当前用户，默认为root")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出关闭容器")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其他")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" port container_id  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器端口信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stats container_id  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器资源占用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" logs container_id  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看正在运行的容器的日志,比如看看为什么没有运行起来、为什么报错了、谁来访问过了等等")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("/path/to/file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从正在运行的 Docker 容器里面，将文件拷贝到本机当前目录")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器信息")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" /tmp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":/usr/local/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将宿主机 tmp 文件夹复制到容器中的 /usr/local/ 路径下面")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("containerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":/usr/local/ "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将容器中的 /usr/local/ 下的文件复制到宿主机下")]),t._v("\n\n\n")])])]),e("ol",[e("li",[e("code",[t._v("docker run")]),t._v("流程：")])]),t._v(" "),e("ul",[e("li",[t._v("Docker首先在本机中寻找该镜像  "),e("code",[t._v("=>")]),t._v(" 如果没有安装 "),e("code",[t._v("=>")]),t._v(" Docker 在 Docker Hub 上查找该镜像 "),e("code",[t._v("=>")]),t._v(" 并拉取下载安装到本机 "),e("code",[t._v("=>")]),t._v(" 最后 Docker 创建一个新的容器并启动该程序")]),t._v(" "),e("li",[t._v("第二次执行  docker run 时  "),e("code",[t._v("=>")]),t._v(" Docker 在本机中已经安装该镜像  "),e("code",[t._v("=>")]),t._v(" Docker 会直接创建一个新的容器并启动该程序")])]),t._v(" "),e("blockquote",[e("p",[t._v("当执行"),e("code",[t._v("docker run")]),t._v("时，Docker会启动一个进程，同时给这个进程分配其独占的文件系统~")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/Tester_muller/article/details/131639725",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件测试|深入解析Docker Run命令：创建和启动容器的完全指南"),e("OutboundLink")],1)]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[t._v("docker stop")]),t._v(" 和 "),e("code",[t._v("docker kill")]),t._v(" 略有不同，"),e("code",[t._v("docker stop")]),t._v(" 发送 "),e("code",[t._v("SIGTERM")]),t._v(" 信号，然后过一段时间再发出 "),e("code",[t._v("SIGKILL")]),t._v(" 信号; 而 "),e("code",[t._v("docker kill")]),t._v(" 是直接发送 "),e("code",[t._v("SIGKILL")]),t._v(" 信号")])]),t._v(" "),e("h4",{attrs:{id:"容器内操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器内操作"}},[t._v("#")]),t._v(" 容器内操作")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在容器内安装node, 跟在本地和云服务器上安装node差不多~")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装完之后可能当前 session 读不到 nvm 命令，可以 exit 之后再进入中终端环境")]),t._v("\nnvm "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.0")]),t._v(".0\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("node")]),t._v(" -v\n\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/hosts  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器ip信息")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commit 容器，创建新镜像")]),t._v("\n\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push 镜像到 docker hub")]),t._v("\n\n\n\n")])])]),e("ul",[e("li",[t._v("来自网友整理的Docker命令图谱：")])]),t._v(" "),e("img",{attrs:{src:t.$withBase("/images/more/docker02.png"),width:"auto"}}),t._v(" "),e("h3",{attrs:{id:"docker的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker的使用"}},[t._v("#")]),t._v(" Docker的使用")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DockerHub"),e("OutboundLink")],1),t._v(" 等网站都提供了众多镜像，一般情况下我们都会从它那找个镜像作为基础镜像，然后再进行我们的后续操作。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/get-started/overview/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 新手引导"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("搭建一个搭建 Web 服务器")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8689")]),t._v(":80 --name web -i -t centos /bin/bash "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取 centos 镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -i 选项告诉 Docker 容器保持标准输入流对容器开放，即使容器没有终端连接")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -t 选项告诉 Docker 为容器分配一个虚拟终端，以便于我们接下来安装 Nginx 服务器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --rm：当停止容器时自动清除容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Docker 还支持输入 -d 选项告诉 Docker 在后台运行容器的守护进程")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --name web 选项告诉 Docker 创建一个名称是 web 的容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 -p 8689:80 告诉 Docker 8689 端口是对外开放的端口，80 端口对外开放的端口映射到容器里的端口号")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 nginx 源")]),t._v("\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y nginx  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装nginx")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("whereis")]),t._v(" nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看安装的路径")]),t._v("\nnginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行nginx")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 之后浏览器访问 http://localhost:8689/ 就可以了~")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop web "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭web服务器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start web "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启web服务器")]),t._v("\n")])])]),e("ul",[e("li",[t._v("构建一个 nginx 服务器")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取 nginx 镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8753")]),t._v(":80 -d --name nginx-test01 nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建 nginx-test01 容器，并运行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 之后浏览器访问 http://localhost:8753/ 即可")]),t._v("\n")])])]),e("h3",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),e("p",[t._v("Dockerfile 文件是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。")]),t._v(" "),e("blockquote",[e("p",[t._v("Docker 构建镜像有两种方式，一种方式是使用 "),e("code",[t._v("docker commit")]),t._v(" 命令，另外一种方式使用 "),e("code",[t._v("docker build")]),t._v(" 命令和 "),e("code",[t._v("Dockerfile")]),t._v(" 文件。其中，不推荐使用 "),e("code",[t._v("docker commit")]),t._v(" 命令进行构建，因为它没有使得整个流程标准化，因此，在企业的中更加推荐使用 "),e("code",[t._v("docker build")]),t._v(" 命令和 "),e("code",[t._v("Dockerfile")]),t._v(" 文件来构建我们的镜像。我们使用 "),e("code",[t._v("Dockerfile")]),t._v(" 文件可以让构建镜像更具备可重复性，同时保证启动脚本和运行程序的标准化。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile reference"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("一个例子：构建我的镜像")])]),t._v(" "),e("ol",[e("li",[t._v("构建"),e("code",[t._v("Dockerfile")]),t._v("文件：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" docker-test\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" docker-test\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" Dockerfile\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("编写"),e("code",[t._v("Dockerfile")]),t._v(" 文件：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("FROM centos:7 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Dockerfile 必须要的第一步，它会从一个已经存在的镜像运行一个容器，换句话说，Docker 需要依赖于一个基础镜像进行构建。这里，我们指定 centos 作为基础镜像，它的版本是 7 (CentOS 7)")]),t._v("\nMAINTAINER VerneyZhou "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VerneyZhou@163.com"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定作者和邮箱")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行两个 RUN 指令进行 Nginx 的下载安装")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 Nginx 源")]),t._v("\nRUN yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装nginx")]),t._v("\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暴露 Dokcer 容器的 80 端口")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("最后，通过 "),e("code",[t._v("docker build")]),t._v(" 命令进行构建:")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"verneyzhou/nginx-test:v1"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - t 告诉 Docker 镜像的名称和版本。注意的是，如果没有指定任何标签，Docker 将会自动为镜像设置一个 lastest 标签")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后还有一个 . 是为了让 Docker 到当前本地目录去寻找 Dockerfile 文件")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("注意的是，Docker 会在每一步构建都会将结果提交为镜像，然后将之前的镜像层看作缓存，因此我们重新构建类似的镜像层时会直接复用之前的镜像。如果我们需要跳过，可以使用 "),e("code",[t._v("--no-cache")]),t._v(" 选项告诉 Docker 不进行缓存。")])]),t._v(" "),e("p",[t._v("构建成功后，通过 "),e("code",[t._v("docker scout quickview")]),t._v(" 可以查看：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("➜  docker-test "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" scout quickview\nINFO New version "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.22")]),t._v(".3 available "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installed version is "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.16")]),t._v(".1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ✓ SBOM of image already cached, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("188")]),t._v(" packages indexed\n\n  Your image  verneyzhou/nginx-test  │    1C    28H    68M    22L     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("?   \n  Base image  centos:7               │    1C    11H    30M    11L          \n\nWhat's Next?\n  Learn "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" about vulnerabilities → "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" scout cves verneyzhou/nginx-test\n\n➜  docker-test \n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("将镜像推送到远程仓库 Docker Hub:")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登录docker")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push verneyzhou/nginx-test:v1\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker push [OPTIONS] NAME[:TAG] ，其中，NAME 是 verneyzhou/nginx-test，TAG 是 v1")]),t._v("\n")])])]),e("p",[t._v("推送成功后，就可以在"),e("a",{attrs:{href:"https://hub.docker.com/u/verneyzhou",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/u/verneyzhou"),e("OutboundLink")],1),t._v("看到了；或者通过"),e("code",[t._v("docker iamges")]),t._v("、在"),e("code",[t._v("Docker Desktop")]),t._v("上，都能看到~")]),t._v(" "),e("blockquote",[e("p",[t._v("推送 Docker Hub 速度很慢，也可以使用国内的仓库，比如"),e("a",{attrs:{href:"https://cr.console.aliyun.com/cn-hangzhou/instances",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云"),e("OutboundLink")],1)])]),t._v(" "),e("ul",[e("li",[t._v("网上找的别人整理的"),e("code",[t._v("Dockerfile")]),t._v("命令：")])]),t._v(" "),e("img",{attrs:{src:t.$withBase("/images/more/docker01.png"),width:"auto"}}),t._v(" "),e("ol",[e("li",[e("code",[t._v("RUN 、 CMD 、 ENTRYPOINT")]),t._v("  三个指令的用途非常相识，不同在于，RUN 指令是在容器被构建时运行的命令，而"),e("code",[t._v("CMD 、 ENTRYPOINT")]),t._v(" 是启动容器时执行 "),e("code",[t._v("shell")]),t._v(" 命令，而 RUN 会被 "),e("code",[t._v("docker run")]),t._v(" 命令覆盖，但是 "),e("code",[t._v("ENTRYPOINT")]),t._v(" 不会被覆盖。")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("RUN")]),t._v(" 命令在 "),e("code",[t._v("image")]),t._v(" 文件的构建阶段执行，执行结果都会打包进入 "),e("code",[t._v("image")]),t._v(" 文件；"),e("code",[t._v("CMD")]),t._v(" 命令则是在容器启动后执行。另外，一个 "),e("code",[t._v("Dockerfile")]),t._v(" 可以包含多个 RUN 命令，但是只能有一个 CMD 命令。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[e("code",[t._v("ADD 、 COPY")]),t._v(" 指令用法一样，唯一不同的是 ADD  支持将归档文件（"),e("code",[t._v("tar, gzip, bzip2, etc")]),t._v("）做提取和解压操作。注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。")])]),t._v(" "),e("li",[e("p",[t._v("指定了 "),e("code",[t._v("CMD")]),t._v(" 命令以后，"),e("code",[t._v("docker container run")]),t._v("命令就不能附加命令了（比如前面的"),e("code",[t._v("/bin/bash")]),t._v("），否则它会覆盖 CMD 命令。")])])]),t._v(" "),e("h3",{attrs:{id:"docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" docker-compose")]),t._v(" "),e("p",[t._v("docker-compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。")]),t._v(" "),e("blockquote",[e("p",[t._v("在 "),e("code",[t._v("docker compose v2")]),t._v(" 中，使用了 "),e("code",[t._v("docker compose")]),t._v(" 命令去替代了 "),e("code",[t._v("docker-compose")]),t._v(" 命令，可以通过 "),e("code",[t._v("docker compose version")]),t._v(" 查看版本号。")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" compose version\nDocker Compose version v2.6.0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 docker compose ls，可列出系统全局有多少容器是根据 docker compose 启动，比 v1 版本方便很多")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" compose "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nNAME                STATUS              CONFIG FILES\ncra-deploy          running"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          /home/train/Documents/cra-deploy/domain.docker-compose.yaml\ntraefik             running"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          /home/train/Documents/traefik/docker-compose.yml\n")])])]),e("ul",[e("li",[t._v("在当前目录，新建配置文件为 "),e("code",[t._v("docker-compose.yaml")]),t._v(":")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("version: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示该 Docker-Compose 文件使用的版本为3")]),t._v("\nservices:\n    nginx:\n        image: nginx:latest\n        container_name: vue-crayon\n        volumes:\n            - ./dist:/usr/share/nginx/html\n            - ./configs/conf.d:/etc/nginx/conf.d\n        ports:\n            - "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80:80"')]),t._v("\n        networks:\n            - crayonnet\n        restart: on-failure\nnetworks:\n    crayonnet:\n")])])]),e("blockquote",[e("p",[t._v("此时可通过 "),e("code",[t._v("docker compose up")]),t._v(" 启动容器。")])]),t._v(" "),e("h3",{attrs:{id:"dockerignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerignore"}},[t._v("#")]),t._v(" .dockerignore")]),t._v(" "),e("p",[t._v("COPY命令将所有应用程序文件从主机目录复制到Docker镜像，通常情况下不需要复制所有文件，这个时候可以通过 "),e("code",[t._v(".dockerignore")]),t._v(" 来定义不需要复制的文件或者文件夹。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("Dockerfile\n\n.git\n.gitignore\n.config\n\n.npm\n.vscode\nnode_modules\npackage-lock.json\nREADME.md\n")])])]),e("h3",{attrs:{id:"例一-使用docker启动一个vite项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例一-使用docker启动一个vite项目"}},[t._v("#")]),t._v(" 例一：使用Docker启动一个Vite项目")]),t._v(" "),e("ol",[e("li",[t._v("新建vite项目")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" create vite@latest\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按提示操作即可，随便新建一个新的vite项目即可~")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" docker-vite-test\nnvm use v16 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# node使用 v16+")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run dev\n")])])]),e("blockquote",[e("p",[t._v("安装依赖，启动项目后，本地会正常运行~")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("新增打包配置")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("项目打包："),e("code",[t._v("npm run build")]),t._v("，默认打包后会生成"),e("code",[t._v("dist")]),t._v("文件；")])]),t._v(" "),e("li",[e("p",[t._v("在根目录下新建 "),e("code",[t._v("Nginx")]),t._v(" 配置文件："),e("code",[t._v("touch default.conf")]),t._v("，添加如下代码：")])])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default.conf")]),t._v("\n\nserver "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  localhost"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#charset koi8-r;")]),t._v("\n    access_log  /var/log/nginx/host.access.log  main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    error_log  /var/log/nginx/error.log  error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root   /usr/share/nginx/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        index  index.html index.htm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    error_page   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v("  /50x.html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    location "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /50x.html "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root   /usr/share/nginx/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[t._v("新建 "),e("code",[t._v("Dockerfile")]),t._v("文件：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在项目根目录下执行：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" Dockerfile\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull nginx "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取最新的nginx镜像")]),t._v("\n")])])]),e("ul",[e("li",[t._v("添加 "),e("code",[t._v("Dockerfile")]),t._v("配置：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Dockerfile")]),t._v("\n\nFROM nginx  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定该镜像是基于 nginx:latest 镜像而构建的")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将项目根目录下 dist 文件夹中的所有文件复制到镜像中 /usr/share/nginx/html/ 目录下")]),t._v("\nCOPY dist/ /usr/share/nginx/html/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 default.conf 复制到 etc/nginx/conf.d/default.conf，用本地的 default.conf 配置来替换 Nginx 镜像里的默认配置。")]),t._v("\nCOPY default.conf /etc/nginx/conf.d/default.conf  \n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("构建镜像：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"verneyzhou/docker-vite-test"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于当前目录的 Dockerfile 来构建镜像，并给镜像命名为：verneyzhou/docker-vite-test，并添加默认标签：lastest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" verneyzhou/docker-vite-test "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建成功，查看镜像：")]),t._v("\n/**\nverneyzhou/docker-vite-test   latest    094000583d8c   About an hour ago   192MB\n */\n")])])]),e("blockquote",[e("p",[t._v("可以看到我们构建了一个192MB的项目镜像；也可以在"),e("code",[t._v("Docker Desktop")]),t._v("上查看~")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("创建容器，并运行")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8894")]),t._v(":80 --name vite-test-container verneyzhou/docker-vite-test\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -d 设置容器在后台运行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -p 表示端口映射，把本机的 8894 端口映射到 container 的 80 端口（这样外网就能通过本机的 8894 端口访问了）。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --name 设置容器名 vite-test-container")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verneyzhou/docker-vite-test 是我们上面构建的镜像名字")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行成功后，查看运行中的容器信息：")]),t._v("\n/**\nCONTAINER ID   IMAGE                         COMMAND                   CREATED          STATUS          PORTS                  NAMES\n6b5c6150db14   verneyzhou/docker-vite-test   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/docker-entrypoint.…"')]),t._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("57")]),t._v(" minutes ago   Up "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("57")]),t._v(" minutes   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:8894-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp   vite-test-container\n */\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[t._v("访问项目")])]),t._v(" "),e("p",[t._v("这时浏览器打开 "),e("code",[t._v("http://localhost:8894/")]),t._v("，就可以看到对应的页面，跟我们前面创建项目的时候看到的界面是一样的；也可以通过："),e("code",[t._v("curl -v -i localhost:8894")]),t._v(" 去查看对应的静态文件；")]),t._v(" "),e("blockquote",[e("p",[t._v("这样就说明我们用把项目打包后的文件放在了 docker 创建的的容器里了，并可以通过启动的本地服务进行访问~")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("发布镜像")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登录镜像，已登录可忽略")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push verneyzhou/docker-vite-test "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将该镜像推送到 hub.docker 上")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("推送完成后，就可以在"),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/"),e("OutboundLink")],1),t._v("上搜到你的镜像了~")])]),t._v(" "),e("h3",{attrs:{id:"例二-docker实现ecs自动部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例二-docker实现ecs自动部署"}},[t._v("#")]),t._v(" 例二：Docker实现ECS自动部署")]),t._v(" "),e("blockquote",[e("p",[t._v("上面关于Docker的安装，生成镜像，容器，运行都是在本地操作的，那如果想把我们的项目自动部署到远程ECS服务器应该怎么办呢？")])]),t._v(" "),e("p",[t._v("这里继续使用上面的vite项目"),e("code",[t._v("docker-vite-test")]),t._v("来实现服务器部署~")]),t._v(" "),e("ol",[e("li",[t._v("流程跟在本地的操作差不多，首先是在服务器上安装"),e("code",[t._v("docker")]),t._v(":")])]),t._v(" "),e("blockquote",[e("p",[t._v("本地直接安装客户端即可，服务器上需要通过"),e("code",[t._v("yum")]),t._v("安装"),e("code",[t._v("docker")]),t._v("安装包; 我的服务器安装环境为"),e("code",[t._v("centos7")]),t._v("~")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首先需要 ssh 登录服务器，然后安装docker")]),t._v("\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" -y\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" -v "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看是否安装成功")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" restart  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启docker服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止docker服务")]),t._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("docker安装完成后，因为在例一中已经将镜像"),e("code",[t._v("verneyzhou/docker-vite-test")]),t._v("push到dockerhub了，之后直接拉下来使用即可~")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" login -u "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("docker-username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -p "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("docker-password"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 登录docker")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull verneyzhou/docker-vite-test "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取镜像")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8894")]),t._v(":80 --name vite-test-container verneyzhou/docker-vite-test "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行容器")]),t._v("\n")])])]),e("p",[t._v("之后如果运行成功的话，访问"),e("code",[t._v("http://[服务器ip]:8894")]),t._v("应该就能访问到该项目了~（待验证...）")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("自动化部署")])]),t._v(" "),e("blockquote",[e("p",[t._v("上面的整个流程中，不管是镜像构建还是容器运行，都是手动去敲命令的，然而，重复的工作都可以被优化。现在使用 "),e("code",[t._v("sh")]),t._v(" 脚本来自动化执行整个部署流程。")])]),t._v(" "),e("ul",[e("li",[t._v("sh 脚本文件一般放在服务器的 "),e("code",[t._v("root")]),t._v(" 目录下: 登录服务器，在 "),e("code",[t._v("root")]),t._v(" 目录下新建文件 "),e("code",[t._v("setup_host.sh")]),t._v(" 文件：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# setup_host.sh")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("image_name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("verneyzhou/docker-vite-test "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示镜像名称")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# version=$(date +'%Y%m%d-%H%M%S') # 表示镜像版本（用时间表示）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("version")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("latest\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("contianer_name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("vite-test-container "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行的容器名称")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("host_port")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8894")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本机端口")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("container_port")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行的容器端口")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'docker build...'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$image_name")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$version")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'docker rm...'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清理同名容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果已经有同名的容器，删除掉")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -aq -f "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$contianer_name"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'docker rm ...'")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -f "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$contianer_name")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'docker run...'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d --name "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$contianer_name")]),t._v(" -p "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host_port")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$container_port")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$image_name")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$version")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Done!'")]),t._v("\n\n")])])]),e("blockquote",[e("p",[t._v("如果有其他容器占用了"),e("code",[t._v("8894")]),t._v("端口，则需要先删除该容器："),e("code",[t._v("docker rm container_id")])])]),t._v(" "),e("ul",[e("li",[t._v("登录服务器，根目录下执行脚本：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x ./setup_host.sh "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加可执行权限")]),t._v("\n./setup_host.sh "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行自动化部署")]),t._v("\n")])])]),e("ul",[e("li",[t._v("其他命令")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it 6b5c6150db14 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器, 或 docker exec -it vite-test-container sh")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop vite-test-container "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start vite-test-container "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启容器")]),t._v("\n")])])]),e("ul",[e("li",[t._v("查看docker安装目录：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iz2zef9ue9eyhqrvjxs3aqz ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# whereis docker")]),t._v("\ndocker: /usr/bin/docker /etc/docker /usr/libexec/docker /usr/share/man/man1/docker.1.gz\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iz2zef9ue9eyhqrvjxs3aqz ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),e("h3",{attrs:{id:"例三-部署node服务应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例三-部署node服务应用"}},[t._v("#")]),t._v(" 例三：部署Node服务应用")]),t._v(" "),e("ol",[e("li",[t._v("新建一个node项目：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" docker-node-test\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" docker-node-test\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" init -y "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# npm初始化")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i express "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装express")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" server.js "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建server.js文件")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("server.js")]),t._v("添加内容：")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" express "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'express'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Constants")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// App")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("express")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\napp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("Running on http://")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("code",[t._v("package.json")]),t._v("中添加命令：")])]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node server.js"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("blockquote",[e("p",[e("code",[t._v("npm run start")]),t._v(" 执行看下是否运行正常~")])]),t._v(" "),e("p",[t._v("或者"),e("code",[t._v("curl -i localhost:8080")]),t._v("，查看响应是否正常：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -i localhost:8080\n\nHTTP/1.1 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\nX-Powered-By: Express\nContent-Type: text/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\nContent-Length: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nETag: W/"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b-Ck1VqNd45QIvq3AZd8XYQLvEhtA"')]),t._v("\nDate: Sun, 06 Aug "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(":25:00 GMT\nConnection: keep-alive\nKeep-Alive: "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("timeout")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\nHello World% \n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("添加 "),e("code",[t._v(".dockerignore")]),t._v(" 和 "),e("code",[t._v("Docerkfile")])])]),t._v(" "),e("ul",[e("li",[e("code",[t._v(".dockerignore")]),t._v(":")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("node_modules\nnpm-debug.log\n")])])]),e("ul",[e("li",[e("code",[t._v("Docerkfile")]),t._v(":")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用更轻量的 node18")]),t._v("\nFROM node:18-alpine\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建工作目录 /app")]),t._v("\nWORKDIR /app\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把安装依赖所需的 package.json AND package-lock.json 复制到 /app")]),t._v("\nCOPY package*.json ./\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装依赖")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果是生产环境使用 ci")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RUN npm ci --omit=dev")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打包源码到 /app")]),t._v("\nCOPY "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暴露端口 8989")]),t._v("\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8989")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器后，执行 node server.js")]),t._v("\nCMD "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("构建镜像 + 启动容器")])]),t._v(" "),e("blockquote",[e("p",[t._v("这一步跟上一个例子部署 Vite 项目一样~")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t my-node-test "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建镜像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d --name my-node-container -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8995")]),t._v(":8989 my-node-test  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("访问")])]),t._v(" "),e("p",[t._v("之后浏览器通过 "),e("code",[t._v("http://localhost:8995/")]),t._v("就可以进行访问；也可通过"),e("code",[t._v("curl -i localhost:8995")]),t._v("查看网页连接情况：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -i localhost:8995\n\nHTTP/1.1 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\nX-Powered-By: Express\nContent-Type: text/html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\nContent-Length: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nETag: W/"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b-Ck1VqNd45QIvq3AZd8XYQLvEhtA"')]),t._v("\nDate: Sun, 06 Aug "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2023")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(":33:40 GMT\nConnection: keep-alive\nKeep-Alive: "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("timeout")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\nHello World%  \n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 其他命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop my-node-container "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start my-node-container "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it my-node-container ash "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器；因为使用 apline 版本的镜像，所以不能用 bash，这里用 sh 或者 ash 代替")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("后续也可以添加自动化部署~")])]),t._v(" "),e("h2",{attrs:{id:"备注"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#备注"}},[t._v("#")]),t._v(" 备注")]),t._v(" "),e("h3",{attrs:{id:"报错记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#报错记录"}},[t._v("#")]),t._v(" 报错记录")]),t._v(" "),e("ul",[e("li",[t._v("在执行"),e("code",[t._v('docker build -t="verneyzhou/githook-vite-test" .')]),t._v("，想通过"),e("code",[t._v("Dockerfile")]),t._v("编译镜像时报错：")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("Dockerfile:39\n--------------------\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     RUN "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("38")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把上一步编译出来dist文件夹拷贝到刚才新建的/app/www文件夹中")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" COPY --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("builder /data/web/dist /app/www\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     \n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     \n--------------------\nERROR: failed to solve: builder: pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed\n")])])]),e("blockquote",[e("p",[t._v("上面"),e("code",[t._v("COPY")]),t._v("命令后面加了参数"),e("code",[t._v("--from=builder")]),t._v(", 意思是引用前一步骤的"),e("code",[t._v("builder")]),t._v("的构建产物，需要前面有声明,如："),e("code",[t._v("FROM node:16-alpine as builder")]),t._v(", 才能调用~")])]),t._v(" "),e("ul",[e("li",[t._v("报错："),e("code",[t._v("bash: ./docker-githook-deploy.sh: Permission denied")])])]),t._v(" "),e("blockquote",[e("p",[t._v("权限受限，添加命令："),e("code",[t._v("chmod +x ./docker-githook-deploy.sh")]),t._v("再执行 "),e("code",[t._v("./docker-githook-deploy.sh")]),t._v("~")])]),t._v(" "),e("ul",[e("li",[t._v("服务器使用"),e("code",[t._v("docker run")]),t._v("后状态为容器状态为"),e("code",[t._v("Exited (1)")]),t._v("，未运行~")])]),t._v(" "),e("blockquote",[e("p",[t._v("暂时无解...")])]),t._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看服务器linux版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iz2zef9ue9eyhqrvjxs3aqz ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uname -sr")]),t._v("\nLinux "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.10")]),t._v(".0-1160.95.1.el7.x86_64\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看centos的版本信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iz2zef9ue9eyhqrvjxs3aqz ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat /etc/redhat-release")]),t._v("\nCentOS Linux release "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.9")]),t._v(".2009 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"收藏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#收藏"}},[t._v("#")]),t._v(" 收藏")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker技术入门与实战"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://juejin.cn/column/6965049243660714021",target:"_blank",rel:"noopener noreferrer"}},[t._v("面向WEB开发人员的Docker"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("docker-compose版本信息："),e("a",{attrs:{href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/docker/compose/releases"),e("OutboundLink")],1)])])]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903918372143112",target:"_blank",rel:"noopener noreferrer"}},[t._v("10分钟快速掌握Docker必备基础知识"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903591375814669",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 0 开始了解 Docker"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903815729119245",target:"_blank",rel:"noopener noreferrer"}},[t._v("30 分钟快速入门 Docker 教程"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7139724794672447518",target:"_blank",rel:"noopener noreferrer"}},[t._v("写给前端的 docker 使用指南"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7250029395023544376",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端工程师也应该了解的docker"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=a.exports}}]);