(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{739:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack原理深析-理论篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack原理深析-理论篇"}},[t._v("#")]),t._v(" Webpack原理深析（理论篇）")]),t._v(" "),a("h2",{attrs:{id:"webpack-打包流程分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-打包流程分析"}},[t._v("#")]),t._v(" Webpack 打包流程分析")]),t._v(" "),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),a("p",[t._v("这一步会从我们配置的"),a("code",[t._v("webpack.config.js")]),t._v("中读取到对应的配置参数和"),a("code",[t._v("shell")]),t._v("命令中传入的参数进行合并得到最终打包配置参数。")]),t._v(" "),a("p",[t._v("这一步主要完成打包流程中的第一步：合并配置参数。")]),t._v(" "),a("h3",{attrs:{id:"编译阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[t._v("#")]),t._v(" 编译阶段")]),t._v(" "),a("p",[t._v("这一步会通过调用"),a("code",[t._v("webpack()")]),t._v("方法返回一个"),a("code",[t._v("compiler")]),t._v("方法，创建我们的"),a("code",[t._v("compiler")]),t._v("对象，并且注册各个"),a("code",[t._v("Webpack Plugin")]),t._v("。找到配置入口中的"),a("code",[t._v("entry")]),t._v("代码，调用"),a("code",[t._v("compiler.run()")]),t._v("方法进行编译。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("创建"),a("code",[t._v("compiler")]),t._v("对象")])])]),t._v(" "),a("blockquote",[a("p",[t._v("在得到最终的配置参数之后, 通过参数创建"),a("code",[t._v("compiler")]),t._v("对象。官方案例中通过调用"),a("code",[t._v("webpack(options)")]),t._v("方法返回的是一个"),a("code",[t._v("compiler")]),t._v("对象。并且同时调用"),a("code",[t._v("compiler.run()")]),t._v("方法启动的代码进行打包。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" webpack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./webpack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../example/webpack.config'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤1: 初始化参数 根据配置文件和shell参数合成参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤2: 调用Webpack(options) 初始化compiler对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack()方法会返回一个compiler对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webpack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用run方法进行打包")]),t._v("\ncompiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stats")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'err'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Compiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./compiler'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("webpack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并参数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mergeOptions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_mergeOptions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建compiler对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiler "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Compiler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mergeOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载插件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_loadPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plugins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们在Compiler这个类的构造函数中创建了一个属性hooks，它的值是三个属性run、emit、done。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" SyncHook "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tapable'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Compiler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建plugin hooks")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始编译时的钩子")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SyncHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 asset 到 output 目录之前执行 (写入文件之前)")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SyncHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 compilation 完成时执行 全部完成编译执行")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("done")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SyncHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// run方法启动编译")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时run方法接受外部传递的callback")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("上面在创建"),a("code",[t._v("hooks")]),t._v("的时候用到了"),a("code",[t._v("tapable")]),t._v("的"),a("code",[t._v("SyncHook")]),t._v("方法，这里"),a("code",[t._v("tapable")]),t._v("很重要，先讲一下~")]),t._v(" "),a("h4",{attrs:{id:"tapable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tapable"}},[t._v("#")]),t._v(" Tapable")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tapable"),a("OutboundLink")],1),t._v("包本质上是为我们更方面创建自定义事件和触发自定义事件的库，类似于"),a("code",[t._v("Nodejs")]),t._v("中的"),a("code",[t._v("EventEmitter Api")]),t._v("。")])]),t._v(" "),a("p",[t._v("Webpack 的成功之处，不仅在于强大的打包构建能力，也在于它灵活的插件机制。Webpack 本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是 Tapable。")]),t._v(" "),a("blockquote",[a("p",[t._v("Webpack 中的插件机制就是基于 Tapable 实现与打包流程解耦，插件的所有形式都是基于 Tapable 实现。")])]),t._v(" "),a("p",[t._v("其实tapable的核心思路有点类似于node.js中的events，最基本的发布/订阅模式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EventEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册事件对应的监听函数")]),t._v("\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("params")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发事件 并传入参数")]),t._v("\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'学习webpack工作流'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 学习webpack工作流")]),t._v("\n\n")])])]),a("p",[t._v("tapable提供的钩子有如下10个:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SyncHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步串行\t不关心监听函数的返回值")]),t._v("\n    SyncBailHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步串行\t只要监听函数中有一个函数的返回值不为 undefined，则跳过剩下所有的逻辑")]),t._v("\n    SyncWaterfallHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SyncLoopHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncParallelHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncParallelBailHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncSeriesHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncSeriesBailHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncSeriesLoopHook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    AsyncSeriesWaterfallHook\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tapable"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以发现"),a("code",[t._v("tapable")]),t._v("提供了各种各样的"),a("code",[t._v("hook")]),t._v("来帮我们管理事件是如何执行的; "),a("code",[t._v("tapable")]),t._v(" 的核心功能就是控制一系列注册事件之间的执行流控制，比如我注册了三个事件，我可以希望他们是并发的，或者是同步依次执行，又或者其中一个出错后，后面的事件就不执行了，这些功能都可以通过 "),a("code",[t._v("tapable")]),t._v(" 的 "),a("code",[t._v("hook")]),t._v(" 实现。")]),t._v(" "),a("p",[a("code",[t._v("Tapable")]),t._v("中比较重要的两个方法是"),a("code",[t._v("call")]),t._v("和"),a("code",[t._v("tap")]),t._v("两个方法。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tap")]),t._v("收集订阅的事件, 每次调用tap，就是收集当前"),a("code",[t._v("hook")]),t._v("实例所有订阅的事件到"),a("code",[t._v("taps")]),t._v("数组;")]),t._v(" "),a("li",[a("code",[t._v("call")]),t._v("方法会根据"),a("code",[t._v("hook")]),t._v("的种类动态生成对应的执行体。")])]),t._v(" "),a("p",[t._v("在 webpack 编译阶段会生成 Compiler 对象，而 Compiler 是继承了 Tapable 的，同时 webpack 的生命周期 hooks 都是各种各样的钩子。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844904004435050503",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webpack插件机制之Tapable-源码解析"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/3huqZYQBNN0gfMsS0xc0KA",target:"_blank",rel:"noopener noreferrer"}},[t._v("从使用到原理，吃透Tapable"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("编写"),a("code",[t._v("Plugin")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("在创建完成"),a("code",[t._v("Compiler")]),t._v("对象后，就开始调用"),a("code",[t._v("_loadPlugin")]),t._v("方法进行插件注册。")])]),t._v(" "),a("p",[t._v("任何一个"),a("code",[t._v("webpack")]),t._v("插件都是一个类，每个插件都必须存在一个"),a("code",[t._v("apply")]),t._v("方法, 这个"),a("code",[t._v("apply")]),t._v("方法会接受一个"),a("code",[t._v("compiler")]),t._v("对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载插件函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_loadPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("plugins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compiler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugins "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    plugins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("plugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// plugin-a.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插件A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PluginA")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compiler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册同步钩子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的compiler对象就是我们new Compiler()创建的实例")]),t._v("\n    compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Plugin A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PluginA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PluginA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("关于"),a("code",[t._v("webpack")]),t._v("插件本质上就是通过发布订阅的模式，通过"),a("code",[t._v("compiler")]),t._v("上监听事件。然后在打包编译过程中触发监听的事件从而添加一定的逻辑影响打包结果。")]),t._v(" "),a("blockquote",[a("p",[t._v("我们在每个插件的"),a("code",[t._v("apply")]),t._v("方法上通过"),a("code",[t._v("tap")]),t._v("在编译准备阶段(也就是调用"),a("code",[t._v("webpack()")]),t._v("函数时)进行订阅对应的事件，当我们的编译执行到一定阶段时发布对应的事件告诉订阅者去执行监听的事件，从而达到在编译阶段的不同生命周期内去触发对应的"),a("code",[t._v("plugin")]),t._v("。")])]),t._v(" "),a("p",[t._v("在我们"),a("code",[t._v("_loadePlugins")]),t._v("函数中, 对于每一个传入的插件在"),a("code",[t._v("compiler")]),t._v("实例对象中进行了订阅，那么当我们调用"),a("code",[t._v("run")]),t._v("方法时，等于真正开始执行编译。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("寻找 entry 入口")])])]),t._v(" "),a("blockquote",[a("p",[t._v("任何一次打包都需要入口文件，接下来让我们就从真正进入打包编译阶段。首当其冲的事情就是，我们需要根据入口配置文件路径寻找到对应入口文件。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// run方法启动编译")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时run方法接受外部传递的callback")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当调用run方式时 触发开始编译的plugin")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取入口配置对象, 获得入口文件的绝对路径")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEntry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("getEntry")]),t._v("方法会将入口路径最终转换为为"),a("code",[t._v("{ [模块名]:[模块绝对路径]... }")]),t._v("的形式。")]),t._v(" "),a("h3",{attrs:{id:"模块编译阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块编译阶段"}},[t._v("#")]),t._v(" 模块编译阶段")]),t._v(" "),a("blockquote",[a("p",[t._v("上边讲了关于编译阶段的准备工作, 接下来进入模板编译阶段~")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("在模块编译阶段，需要做的事件：")]),t._v(" "),a("ul",[a("li",[t._v("根据入口文件路径分析入口文件，对于入口文件进行匹配对应的"),a("code",[t._v("loader")]),t._v("进行处理入口文件。")]),t._v(" "),a("li",[t._v("将"),a("code",[t._v("loader")]),t._v("处理完成的入口文件使用"),a("code",[t._v("webpack")]),t._v("进行编译。")]),t._v(" "),a("li",[t._v("分析入口文件依赖，重复上边两个步骤编译对应依赖。")]),t._v(" "),a("li",[t._v("如果嵌套文件存在依赖文件，递归调用依赖模块进行编译。")]),t._v(" "),a("li",[t._v("递归编译完成后，组装一个个包含多个模块的"),a("code",[t._v("chunk")])])])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("调用"),a("code",[t._v("loader")]),t._v("处理匹配后缀文件")])])]),t._v(" "),a("blockquote",[a("p",[t._v("简单来说"),a("code",[t._v("loader")]),t._v("本质上就是一个函数，接受我们的源代码作为入参同时返回处理后的结果。"),a("a",{attrs:{href:"https://webpack.docschina.org/concepts/loaders/#loader-features",target:"_blank",rel:"noopener noreferrer"}},[t._v("loader 特性"),a("OutboundLink")],1)])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模块编译方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildModule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("moduleName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" modulePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 读取文件原始代码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" originSourceCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("originSourceCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modulePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// moduleCode为修改后的代码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("moduleCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" originSourceCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  2. 调用loader进行处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modulePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于传入的文件路径匹配到对应后缀的"),a("code",[t._v("loader")]),t._v("后，依次倒序执行"),a("code",[t._v("loader")]),t._v("处理我们的代码。最终，在每一个模块编译中"),a("code",[t._v("this.moduleCode")]),t._v("都会经过对应的"),a("code",[t._v("loader")]),t._v("处理。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("webpack 模块编译阶段")])])]),t._v(" "),a("ol",[a("li",[t._v("从入口模块进行分析，调用匹配文件的"),a("code",[t._v("loaders")]),t._v("对文件进行处理。同时分析模块依赖的模块，递归进行模块编译工作。")]),t._v(" "),a("li",[t._v("在递归完成后，每个引用模块通过"),a("code",[t._v("loaders")]),t._v("处理完成同时得到模块之间的相互依赖关系;")]),t._v(" "),a("li",[t._v("得到"),a("code",[t._v("loader")]),t._v("处理后的结果后，通过"),a("code",[t._v("babel")]),t._v("分析"),a("code",[t._v("loader")]),t._v("处理后的代码，进行代码编译。\n"),a("blockquote",[a("p",[t._v("将每个依赖的模块编译后的对象加入"),a("code",[t._v("this.modules")]),t._v(", 将每个入口文件编译后的对象加入"),a("code",[t._v("this.entries")]),t._v("。")])])])]),t._v(" "),a("p",[t._v("每个模块间的依赖关系，依赖于"),a("code",[t._v("AST")]),t._v("语法树。每个模块文件在通过"),a("code",[t._v("Loader")]),t._v("解析完成之后，会通过"),a("code",[t._v("acorn")]),t._v("库生成模块代码的"),a("code",[t._v("AST")]),t._v("语法树，通过语法树就可以分析这个模块是否还有依赖的模块，进而继续循环执行下一个模块的编译解析。")]),t._v(" "),a("h3",{attrs:{id:"编译完成阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译完成阶段"}},[t._v("#")]),t._v(" 编译完成阶段")]),t._v(" "),a("blockquote",[a("p",[t._v("在上一步我们完成了模块之间的编译，在将所有模块递归编译完成后，我们需要根据上述的依赖关系，组合最终输出的"),a("code",[t._v("chunk")]),t._v("模块。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据入口文件和依赖模块组装chunks")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildUpChunk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entryName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entryObj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" chunk "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" entryName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每一个入口文件作为一个chunk")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("entryModule")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" entryObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry编译后的对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("modules")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n        i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entryName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 寻找与当前entry有关的所有module")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将chunk添加到this.chunks中去")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chunks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里根据对应的入口文件通过每一个模块"),a("code",[t._v("(module)")]),t._v("的"),a("code",[t._v("name")]),t._v("属性查找对应入口的所有依赖文件。")]),t._v(" "),a("h3",{attrs:{id:"输出文件阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出文件阶段"}},[t._v("#")]),t._v(" 输出文件阶段")]),t._v(" "),a("blockquote",[a("p",[t._v("整理模块依赖关系，同时将处理后的文件输出到"),a("code",[t._v("ouput")]),t._v("的磁盘目录中。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler.js")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Compiler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   \n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// run方法启动编译")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时run方法接受外部传递的callback")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当调用run方式时 触发开始编译的plugin")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取入口配置对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEntry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译入口文件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildEntryModule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导出列表;之后将每个chunk转化称为单独的文件加入到输出列表assets中")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exportFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("在"),a("code",[t._v("buildEntryModule")]),t._v("模块编译完成之后，通过"),a("code",[t._v("this.exportFile")]),t._v("方法实现导出文件的逻辑。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("exportFile做了如下几件事:")]),t._v(" "),a("ul",[a("li",[t._v("首先获取配置参数的输出配置，迭代我们的"),a("code",[t._v("this.chunks")]),t._v("，将"),a("code",[t._v("output.filename")]),t._v("中的"),a("code",[t._v("[name]")]),t._v("替换称为对应的入口文件名称。同时根据"),a("code",[t._v("chunks")]),t._v("的内容为"),a("code",[t._v("this.assets")]),t._v("中添加需要打包生成的文件名和文件内容。")]),t._v(" "),a("li",[t._v("将文件写入磁盘前调用"),a("code",[t._v("plugin")]),t._v("的"),a("code",[t._v("emit")]),t._v("钩子函数。")]),t._v(" "),a("li",[t._v("判断"),a("code",[t._v("output.path")]),t._v("文件夹是否存在，如果不存在，则通过"),a("code",[t._v("fs")]),t._v("新建这个文件夹。")]),t._v(" "),a("li",[t._v("将本次打包生成的所有文件名( this.assets 的 key 值组成的数组)存放进入 files 中去。")]),t._v(" "),a("li",[t._v("循环"),a("code",[t._v("this.assets")]),t._v("，将文件依次写入对应的磁盘中去。")]),t._v(" "),a("li",[t._v("所有打包流程结束，触发"),a("code",[t._v("webpack")]),t._v("插件的"),a("code",[t._v("done")]),t._v("钩子。")])])]),t._v(" "),a("p",[t._v("最终"),a("code",[t._v("Webpack")]),t._v("打包出来的"),a("code",[t._v("bundle")]),t._v("文件是一个"),a("code",[t._v("IIFE")]),t._v("的执行函数。")]),t._v(" "),a("blockquote",[a("p",[t._v("在打包生成的"),a("code",[t._v("bundle")]),t._v("文件中，有一个"),a("code",[t._v("__webpack_require__")]),t._v("方法，它是Webpack内部实现的一套依赖引入函数, 我们在模块化开发的时候，通常会使用"),a("code",[t._v("ES Module")]),t._v("或者"),a("code",[t._v("CommonJS")]),t._v("规范导出/引入依赖模块，"),a("code",[t._v("webpack")]),t._v("打包编译的时候，会统一替换成自己的"),a("code",[t._v("__webpack_require__")]),t._v("来实现模块的引入和导出，从而实现模块缓存机制，以及抹平不同模块规范之间的一些差异性。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("总结")])])]),t._v(" "),a("ol",[a("li",[t._v("读取"),a("code",[t._v("webpack")]),t._v("的配置参数；")]),t._v(" "),a("li",[t._v("启动"),a("code",[t._v("webpack")]),t._v("，创建"),a("code",[t._v("Compiler")]),t._v("对象并开始解析项目；")]),t._v(" "),a("li",[t._v("从入口文件"),a("code",[t._v("（entry）")]),t._v("开始解析，并且找到其导入的依赖模块，递归遍历分析，形成依赖关系树；")]),t._v(" "),a("li",[t._v("对不同文件类型的依赖模块文件使用对应的"),a("code",[t._v("Loader")]),t._v("进行编译，最终转为"),a("code",[t._v("Javascript")]),t._v("文件；")]),t._v(" "),a("li",[t._v("整个过程中"),a("code",[t._v("webpack")]),t._v("会通过发布订阅模式，向外抛出一些"),a("code",[t._v("hooks")]),t._v("，而"),a("code",[t._v("webpack")]),t._v("的插件即可通过监听这些关键的事件节点，执行插件任务进而达到干预输出结果的目的。")])]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/images/webpack/webpack302.png"),width:"auto"}}),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://juejin.cn/post/7031546400034947108",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webapck5核心打包原理全流程解析"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("ul",[a("li",[t._v("收集依赖")]),t._v(" "),a("li",[t._v("ES6转ES5")]),t._v(" "),a("li",[t._v("替换require和exports")])]),t._v(" "),a("h3",{attrs:{id:"热更新-hmr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新-hmr"}},[t._v("#")]),t._v(" 热更新（HMR）")]),t._v(" "),a("blockquote",[a("p",[t._v("动态模块热加载, "),a("code",[t._v("Hot Module Replacement")]),t._v("，简称"),a("code",[t._v("HMR")]),t._v("，无需完全刷新整个页面的同时，更新模块。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("优点")]),t._v(" "),a("ul",[a("li",[t._v("可以实现局部更新，避免多余的资源请求，提高开发效率")]),t._v(" "),a("li",[t._v("在更新的时候可以保存应用原有状态")]),t._v(" "),a("li",[t._v("在代码修改和页面更新方面，实现所见即所得")])])]),t._v(" "),a("p",[t._v("刷新一般分两种：")]),t._v(" "),a("ul",[a("li",[t._v("一种是页面刷新，不保留页面状态，就是简单粗暴，直接"),a("code",[t._v("window.location.reload()")]),t._v("。")]),t._v(" "),a("li",[t._v("另一种是基于"),a("code",[t._v("WDS (Webpack-dev-server)")]),t._v("的模块热替换，只需要局部刷新页面上发生变化的模块，同时可以保留当前的页面状态，比如复选框的选中状态、输入框的输入等。")])]),t._v(" "),a("h4",{attrs:{id:"webpack的编译构建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的编译构建过程"}},[t._v("#")]),t._v(" webpack的编译构建过程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("项目启动后，进行构建打包，控制台会输出构建过程，我们可以观察到生成了一个 "),a("code",[t._v("Hash")]),t._v("值, 如："),a("code",[t._v("abc123456")]),t._v(";")])]),t._v(" "),a("li",[a("p",[t._v("然后，在我们每次修改代码保存后，控制台都会出现 "),a("code",[t._v("Compiling…")]),t._v("字样, 编译完成可以在控制台中观察到：")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("新的Hash值：123456edf\n新的json文件： abc123456"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n新的js文件：index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc123456"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n")])])]),a("blockquote",[a("p",[a("code",[t._v("Hash")]),t._v("值代表每一次编译的标识, 根据新生成文件名可以发现，上次输出的"),a("code",[t._v("Hash")]),t._v("值会作为本次编译新生成的文件标识。依次类推，本次输出的"),a("code",[t._v("Hash")]),t._v("值会被作为下次热更新的标识。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("每次修改代码，紧接着触发重新编译，然后浏览器就会发出 2 次请求。请求的便是上面新生成的 2 个文件："),a("code",[t._v("abc123456.hot-update.json, index.abc123456.hot-update.js")])])]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:t.$withBase("/images/webpack/webpack301.jpeg"),width:"auto"}}),t._v(" "),a("blockquote",[a("p",[t._v("先看"),a("code",[t._v("json")]),t._v("文件，返回的结果中，"),a("code",[t._v("h")]),t._v("代表本次新生成的"),a("code",[t._v("Hash")]),t._v("值，用于下次文件热更新请求的前缀。"),a("code",[t._v("c")]),t._v("表示当前要热更新的文件对应的是"),a("code",[t._v("publish")]),t._v("模块; 生成的"),a("code",[t._v("js")]),t._v("文件就是本次修改后重新编译打包后的代码。")])]),t._v(" "),a("blockquote",[a("p",[t._v("还有一种情况是，如果没有任何代码改动，直接保存文件，控制台也会输出编译打包信息的，但不会输出新的js文件，因为没有改动任何代码，同时浏览器发出的请求，可以看到"),a("code",[t._v("c")]),t._v("值为空，代表本次没有需要更新的代码。")])]),t._v(" "),a("h4",{attrs:{id:"热更新实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新实现原理"}},[t._v("#")]),t._v(" 热更新实现原理")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("webpack-dev-server")]),t._v("启动本地服务")])]),t._v(" "),a("ul",[a("li",[t._v("启动"),a("code",[t._v("webpack")]),t._v("，生成"),a("code",[t._v("compiler")]),t._v("实例。"),a("code",[t._v("compiler")]),t._v("上有很多方法，比如可以启动 "),a("code",[t._v("webpack")]),t._v(" 所有编译工作，以及监听本地文件的变化；")]),t._v(" "),a("li",[t._v("同时使用 "),a("code",[t._v("express")]),t._v(" 框架启动本地 "),a("code",[t._v("server")]),t._v(" ，让浏览器可以请求本地的静态资源。")]),t._v(" "),a("li",[t._v("本地 "),a("code",[t._v("server")]),t._v(" 启动之后，再去启动"),a("code",[t._v("websocket")]),t._v(" 服务，"),a("strong",[t._v("通过 "),a("code",[t._v("websocket")]),t._v("，可以建立本地服务和浏览器的双向通信")]),t._v("。这样就可以实现当本地文件发生变化，立马告知浏览器可以热更新代码。")]),t._v(" "),a("li",[t._v("启动本地服务前，会调用一个方法获取"),a("code",[t._v("websocket")]),t._v("客户端代码路径、"),a("code",[t._v("webpack")]),t._v("热更新代码路径; "),a("code",[t._v("webpack")]),t._v("热更新代码路径可以在"),a("code",[t._v("webpack.config.js")]),t._v("的"),a("code",[t._v("entry")]),t._v("中配置")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("webpack监听文件变化")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("每次修改代码，就会触发编译。说明我们还需要监听本地代码的变化，这主要是通过"),a("code",[t._v("webpack-dev-middleware")]),t._v("实现的。"),a("code",[t._v("webpack-dev-server")]),t._v("只负责启动服务和前置准备工作，所有文件相关的操作都抽离到"),a("code",[t._v("webpack-dev-middleware")]),t._v("库了，主要是本地文件的编译和输出以及监听。")])]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("webpack-dev-middleware")]),t._v("会首先对本地文件代码进行编译打包，也就是"),a("code",[t._v("webpack")]),t._v("的一系列编译流程；")])]),t._v(" "),a("li",[a("p",[t._v("其次编译结束后，开启对本地文件的监听，当文件发生变化，重新编译，编译完成之后继续监听。")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("监听本地文件的变化主要是通过文件的生成时间是否有变化")]),t._v("，从而实现代码的改动保存会自动编译，重新打包。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("接着将编译后的文件打包到内存。")])]),t._v(" "),a("blockquote",[a("p",[t._v("这就是为什么在开发的过程中，你会发现"),a("code",[t._v("dist")]),t._v("目录没有打包后的代码，因为都在内存中。原因就在于访问内存中的代码比访问文件系统中的文件更快，而且也减少了代码写入文件的开销。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("监听webpack编译结束")])])]),t._v(" "),a("p",[t._v("webpack-dev-server 会调用了一个方法用来注册监听事件的，监听每次 "),a("code",[t._v("webpack")]),t._v(" 编译完成。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("该方法主要建立了 websocket 和服务端的连接，并注册了 2 个监听事件。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("hash")]),t._v("事件，更新最新一次打包后的"),a("code",[t._v("hash")]),t._v("值。")]),t._v(" "),a("li",[a("code",[t._v("ok")]),t._v("事件，进行热更新检查。")])])]),t._v(" "),a("p",[t._v("当监听到一次 "),a("code",[t._v("webpack")]),t._v(" 编译结束，就会调用方法通过 "),a("code",[t._v("websocket")]),t._v(" 给浏览器发送通知，这样浏览器就可以拿到最新的"),a("code",[t._v("hash")]),t._v("值了，做检查更新逻辑。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("HotModuleReplacementPlugin 进行热更新")])])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("HotModuleReplacementPlugin")]),t._v(" ，它是"),a("code",[t._v("Webpack")]),t._v("内置的"),a("code",[t._v("Plugin")]),t._v(", 平常我们会现在"),a("code",[t._v("webpack.config.js")]),t._v("中通过"),a("code",[t._v("new webpack.HotModuleReplacementPlugin()")]),t._v("进行添加~")])]),t._v(" "),a("p",[t._v("打包之后，"),a("code",[t._v("HotModuleReplacementPlugin")]),t._v(" 会在 "),a("code",[t._v("bundle.js")]),t._v(" 中添加一些代码，添加"),a("code",[t._v("module.hot.check")]),t._v("方法，然后浏览器就可以调用这个方法开始进行热更新了~")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("module.hot.check 方法")]),t._v(" "),a("ul",[a("li",[t._v("利用上一次保存的"),a("code",[t._v("hash")]),t._v("值，调用"),a("code",[t._v("hotDownloadManifest")]),t._v("发送"),a("code",[t._v("xxx/hash.hot-update.json")]),t._v("的"),a("code",[t._v("ajax")]),t._v("请求；")]),t._v(" "),a("li",[t._v("请求结果获取热更新模块，以及下次热更新的"),a("code",[t._v("Hash")]),t._v("标识，并进入热更新准备阶段;")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("hotDownloadUpdateChunk")]),t._v("发送"),a("code",[t._v("xxx/hash.hot-update.js")]),t._v(" 请求.")])])]),t._v(" "),a("p",[t._v("之后就是通过 "),a("code",[t._v("hotApply")]),t._v("方法实现热更新模块替换：")]),t._v(" "),a("ol",[a("li",[t._v("通过"),a("code",[t._v("hotUpdate")]),t._v("可以找到旧模块;")]),t._v(" "),a("li",[t._v("将新的模块添加到 "),a("code",[t._v("modules")]),t._v(" 中;")]),t._v(" "),a("li",[t._v("通过"),a("code",[t._v("__webpack_require__")]),t._v("执行相关模块的代码.")])]),t._v(" "),a("h4",{attrs:{id:"热更新原理总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新原理总结"}},[t._v("#")]),t._v(" 热更新原理总结")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("流程")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("express")]),t._v("启动本地服务，当浏览器访问资源时对此做响应。")]),t._v(" "),a("li",[t._v("服务端和客户端使用"),a("code",[t._v("websocket")]),t._v("实现长连接")]),t._v(" "),a("li",[a("code",[t._v("webpack")]),t._v("监听源文件的变化，即当开发者保存文件时触发"),a("code",[t._v("webpack")]),t._v("的重新编译。\n"),a("ul",[a("li",[t._v("每次编译都会生成"),a("code",[t._v("hash值、已改动模块的json文件、已改动模块代码的js文件")])]),t._v(" "),a("li",[t._v("编译完成后通过"),a("code",[t._v("socket")]),t._v("向客户端推送当前编译的"),a("code",[t._v("hash")]),t._v("戳")])])]),t._v(" "),a("li",[t._v("客户端的"),a("code",[t._v("websocket")]),t._v("监听到有文件改动推送过来的"),a("code",[t._v("hash")]),t._v("戳，会和上一次对比\n"),a("ul",[a("li",[t._v("一致则走缓存")]),t._v(" "),a("li",[t._v("不一致则通过"),a("code",[t._v("ajax")]),t._v("和"),a("code",[t._v("jsonp")]),t._v("向服务端获取最新资源")])])]),t._v(" "),a("li",[t._v("使用内存文件系统去替换有修改的内容实现局部刷新")])])]),t._v(" "),a("p",[t._v("底层实现：")]),t._v(" "),a("ol",[a("li",[t._v("与本地服务器建立「socket」连接，注册 hash 和 ok 两个事件，发生文件修改时，给客户端推送 hash 事件。客户端根据 hash 事件中返回的参数来拉取更新后的文件。")]),t._v(" "),a("li",[t._v("HotModuleReplacementPlugin 会在文件修改后，生成两个文件，用于被客户端拉取使用")])]),t._v(" "),a("p",[a("strong",[t._v("参考")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844904008432222215",target:"_blank",rel:"noopener noreferrer"}},[t._v("轻松理解webpack热更新原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000020310371",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底搞懂并实现 webpack 热更新原理"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"tree-shaking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[t._v("#")]),t._v(" Tree Shaking")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Tree-Shaking")]),t._v(" 是一种基于 "),a("code",[t._v("ES Module")]),t._v(" 规范的 "),a("code",[t._v("Dead Code Elimination")]),t._v(" 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其它模块使用，并将其删除，以此实现打包产物的优化。")])]),t._v(" "),a("p",[t._v("Tree Shaking 较早前由 Rich Harris 在 Rollup 中率先实现，Webpack 自 2.0 版本开始接入，至今已经成为一种应用广泛的性能优化手段。")]),t._v(" "),a("h4",{attrs:{id:"理论基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理论基础"}},[t._v("#")]),t._v(" 理论基础")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("CommonJs、AMD、CMD")]),t._v(" 等旧版本的 "),a("code",[t._v("JavaScript")]),t._v(" 模块化方案中，导入导出行为是高度动态，难以预测的，例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("而 "),a("code",[t._v("ESM")]),t._v(" 方案则从规范层面规避这一行为，它要求所有的导入导出语句只能出现在模块顶层，且导入导出的模块名必须为字符串常量，这意味着下述代码在 "),a("code",[t._v("ESM")]),t._v(" 方案下是非法的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("所以，"),a("code",[t._v("ESM")]),t._v(" 下模块之间的依赖关系是高度确定的，与运行状态无关，编译工具只需要对 "),a("code",[t._v("ESM")]),t._v(" 模块做静态分析，就可以从代码字面量中推断出哪些模块值未曾被其它模块使用，这是实现 "),a("code",[t._v("Tree Shaking")]),t._v(" 技术的必要条件。")]),t._v(" "),a("h4",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[a("code",[t._v("Webpack")]),t._v(" 中，"),a("code",[t._v("Tree-shaking")]),t._v(" 的实现一是先标记出模块导出值中哪些没有被用过，二是使用 "),a("code",[t._v("Terser")]),t._v(" 删掉这些没被用到的导出语句。标记过程大致可划分为三个步骤：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("收集模块导出")]),t._v("："),a("code",[t._v("Make")]),t._v(" 阶段，收集模块导出变量并记录到模块依赖关系图 "),a("code",[t._v("ModuleGraph")]),t._v(" 变量中;")]),t._v(" "),a("li",[a("strong",[t._v("标记模块导出")]),t._v("：模块导出信息收集完毕后，"),a("code",[t._v("Webpack")]),t._v(" 需要标记出各个模块的导出列表中，哪些导出值有被其它模块用到，哪些没有，这一过程发生在 "),a("code",[t._v("Seal")]),t._v(" 阶段;")]),t._v(" "),a("li",[a("strong",[t._v("生成代码")]),t._v("：经过前面的收集与标记步骤后，"),a("code",[t._v("Webpack")]),t._v(" 已经在 "),a("code",[t._v("ModuleGraph")]),t._v(" 体系中清楚地记录了每个模块都导出了哪些值，每个导出值又没被哪些模块所使用。接下来，"),a("code",[t._v("Webpack")]),t._v(" 会根据导出值的使用情况生成不同的代码;")]),t._v(" "),a("li",[a("strong",[t._v("删除 Dead Code")]),t._v(": 经过前面几步操作之后，模块导出列表中未被使用的值都不会定义在 "),a("code",[t._v("__webpack_exports__")]),t._v(" 对象中，形成一段不可能被执行的 Dead Code, 在此之后，将由 "),a("code",[t._v("Terser、UglifyJS")]),t._v(" 等 "),a("code",[t._v("DCE")]),t._v(" 工具“摇”掉这部分无效代码，构成完整的 "),a("code",[t._v("Tree Shaking")]),t._v(" 操作。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bar.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("标记功能只会影响到模块的导出语句，真正执行"),a("code",[t._v("“Shaking”")]),t._v("操作的是 "),a("code",[t._v("Terser")]),t._v(" 插件。例如在上例中 "),a("code",[t._v("foo")]),t._v(" 变量经过标记后，已经变成一段 "),a("code",[t._v("Dead Code")]),t._v(" —— 不可能被执行到的代码，这个时候只需要用 "),a("code",[t._v("Terser、UglifyJS")]),t._v("等工具 提供的 "),a("code",[t._v("DCE")]),t._v(" 功能就可以删除这一段定义语句，以此实现完整的 "),a("code",[t._v("Tree Shaking")]),t._v(" 效果。")]),t._v(" "),a("blockquote",[a("p",[t._v("参考："),a("a",{attrs:{href:"https://juejin.cn/post/7002410645316436004",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webpack 原理系列九：Tree-Shaking 实现原理"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"ast-语法树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast-语法树"}},[t._v("#")]),t._v(" AST 语法树")]),t._v(" "),a("p",[t._v("在计算机科学中，"),a("strong",[t._v("抽象语法树（Abstract Syntax Tree，AST）")]),t._v("，或简称语法树（Syntax tree），是"),a("strong",[t._v("源代码语法结构的一种抽象表示")]),t._v("。它以"),a("strong",[t._v("树状的形式")]),t._v("表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。webpack、eslint 等很多工具库的核心都是通过抽象语法书这个概念来实现对代码的检查、分析等操作。")]),t._v(" "),a("p",[t._v('之所以说语法"抽象"的，是因为这里的语法并不会表示出真实语法中出现的每个细节。')]),t._v(" "),a("blockquote",[a("p",[t._v("比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 "),a("code",[t._v("if-condition-then")]),t._v(" 这样的条件跳转语句，可以使用带有三个分支的节点来表示。详见"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("对于JavaScript而言，可以通过"),a("code",[t._v("JS Parser")]),t._v("将JS代码转换成AST。目前比较常见的"),a("code",[t._v("JS Parser")]),t._v("有：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/jquery/esprima",target:"_blank",rel:"noopener noreferrer"}},[t._v("esprima"),a("OutboundLink")],1),t._v("（流行库）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/babel/babel/tree/master/packages/babel-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babylon"),a("OutboundLink")],1),t._v("（babel中使用）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[t._v("acorn"),a("OutboundLink")],1),t._v("（webpack中使用）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"}},[t._v("espree"),a("OutboundLink")],1),t._v("（在acorn基础上衍生而来，eslint中使用）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("astexplorer"),a("OutboundLink")],1),t._v("（在线生成工具，可选不同的JS Parser实时查看）。")])]),t._v(" "),a("p",[t._v("在将代码转换成AST的过程中，有两个重要的阶段："),a("strong",[t._v("词法分析（Lexical Analysis）和语法分析（Syntax Analysis）")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"词法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[t._v("#")]),t._v(" 词法分析")]),t._v(" "),a("p",[t._v("词法分析（Lexical analysis）, 也叫"),a("strong",[t._v("扫描（scanner）")]),t._v(", 读取我们的代码，然后把它们按照预定的规则合并成一个个的"),a("strong",[t._v("标记（tokens）")]),t._v("。同时，它会移除空白符，注释，等。最后，整个代码将被分割进一个tokens列表（或者说一维数组）。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("JavaScript 中的 token 主要包含以下几种：")]),t._v(" "),a("ul",[a("li",[t._v("关键字："),a("code",[t._v("var、let、const")]),t._v("等")]),t._v(" "),a("li",[t._v("标识符：没有被引号括起来的连续字符，可能是一个变量，也可能是 "),a("code",[t._v("if、else")]),t._v(" 这些关键字，又或者是 "),a("code",[t._v("true、false")]),t._v(" 这些内置常量")]),t._v(" "),a("li",[t._v("运算符： "),a("code",[t._v("+、-、 *、/")]),t._v(" 等")]),t._v(" "),a("li",[t._v("数字：像十六进制，十进制，八进制以及科学表达式等")]),t._v(" "),a("li",[t._v("字符串：变量的值等")]),t._v(" "),a("li",[t._v("空格：连续的空格，换行，缩进等")]),t._v(" "),a("li",[t._v("注释：行注释或块注释都是一个不可拆分的最小语法单元")]),t._v(" "),a("li",[t._v("标点：大括号、小括号、分号、冒号等")])])]),t._v(" "),a("p",[t._v("比如："),a("code",[t._v("const a = 1")]),t._v(", 会被解析成 "),a("code",[t._v("const、a、=、1")]),t._v(" 四个词法单元：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Keyword"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关键字")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"const"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Identifier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Punctuator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"'1'\"")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("词法分析阶段仿佛最初学英语时，将一个句子拆分成很多独立的单词，我们首先记住每一个单词的类型和含义，但并不关心单词之间的具体联系。")])]),t._v(" "),a("h4",{attrs:{id:"语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[t._v("#")]),t._v(" 语法分析")]),t._v(" "),a("p",[t._v("语法分析（Syntax analysis），也称"),a("strong",[t._v("解析器（Parser）")]),t._v("。将词法单元流转换成一个由元素逐级嵌套组成的语法结构树，即所谓的抽象语法树（AST）。")]),t._v(" "),a("p",[t._v("它会将词法分析出来的数组转化成树形的表达形式。同时，验证语法，语法如果有错的话，抛出语法错误。")]),t._v(" "),a("p",[t._v("当生成树的时候，解析器会删除一些没必要的标识 tokens（比如不完整的括号），因此 AST 不是 100% 与源码匹配的，但是已经能让我们知道如何处理了。说个题外话，解析器100%覆盖所有代码结构生成树叫做 CST（具体语法树）。")]),t._v(" "),a("p",[t._v("比如"),a("code",[t._v("const a = 1")]),t._v("中被解析出来的 "),a("code",[t._v("const、a、=、1")]),t._v(" 这四个词法单元组成的词法单元流则会被转换成如下结构树:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Program"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 程序")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"body"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VariableDeclaration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 描述该语句的类型  --\x3e 变量声明")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"declarations"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明内容的数组，里面每一项也是一个对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VariableDeclarator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 描述该语句的类型")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 描述变量名称的对象")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Identifier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标识符")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量的名字")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"init"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  初始化变量值的对象")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Literal"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字面量")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 值 "1" 不带引号')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"raw"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1" 带引号')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"kind"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"const"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明的关键字")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sourceType"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("根据这个数据结构大致可以看出转换之前源代码的基本构造。")]),t._v(" "),a("p",[t._v("在拿到了 AST 后，我们就可以分析 AST，在此基础上做一些自己的事情。比如最简单的将代码中的某一变量都替换成另一个名字。")]),t._v(" "),a("h4",{attrs:{id:"代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[t._v("#")]),t._v(" 代码生成")]),t._v(" "),a("p",[t._v("代码生成阶段：将 AST 转换成一系列可执行的机器指令代码，对应例子的话就是机器通过执行指令会在内存中创建一个变量 a，并将值 1 赋值给它。")]),t._v(" "),a("p",[t._v("该阶段是一个非常自由的环节，可由多个步骤共同组成。在这个阶段我们可以遍历初始的 AST，对其结构进行改造，再将改造后的结构生成对应的代码字符串。")]),t._v(" "),a("blockquote",[a("p",[t._v("我们已经弄清楚每一条句子的语法结构并知道如何写出语法正确的英文句子，通过这个基本结构我们可以把英文句子完美地转换成一个中文句子或是文言文。")])]),t._v(" "),a("h4",{attrs:{id:"babel-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-原理"}},[t._v("#")]),t._v(" Babel 原理")]),t._v(" "),a("blockquote",[a("p",[t._v("提到 AST 我们肯定会想到 babel，自从 ES6 开始大规模使用以来，babel 就出现了，它主要解决了就是一些浏览器不兼容 ES6 新特性的问题，其实就把 ES6 代码转换为 ES5 的代码，兼容所有浏览器，babel 转换代码其实就是用了 AST，babel 与 AST 就有着很一种特别的关系。")])]),t._v(" "),a("p",[t._v("Babel是一个 javascript 编译器。宏观来说，它分3个阶段运行代码："),a("strong",[t._v("解析（parsing），转译（transforming），生成（generation）")]),t._v("。我们可以给 babel 一些 javascript 代码，它修改代码然后生成新的代码返回。它创建了AST，遍历树，修改tokens，最后从AST中生成新的代码。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("处理流程")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("解析 (Parsing)")]),t._v("：这个过程由编译器实现，会经过词法分析过程和语法分析过程，从而生成 AST。")]),t._v(" "),a("li",[a("strong",[t._v("读取/遍历 (Traverse)")]),t._v("：深度优先遍历 AST ，访问树上各个节点的信息（Node）。")]),t._v(" "),a("li",[a("strong",[t._v("修改/转换 (Transform)")]),t._v("：在遍历的过程中可对节点信息进行修改，生成新的 AST。")]),t._v(" "),a("li",[a("strong",[t._v("输出 (Printing)")]),t._v("：对初始 AST 进行转换后，根据不同的场景，既可以直接输出新的 AST，也可以转译成新的代码块。")])])]),t._v(" "),a("p",[t._v("babel 是如何将 code 转为 AST 呢？ 在这个阶段会用到 babel 提供的解析器 "),a("code",[t._v("@babel/parser")]),t._v("，之前叫 "),a("code",[t._v("Babylon")]),t._v("，它并非由babel团队自己开发的，而是基于fork的 acorn 项目。")]),t._v(" "),a("p",[t._v("babel使用 babylon，所以，首先解析代码成AST，然后遍历AST，再反转所有的变量名，最后生成代码。")]),t._v(" "),a("p",[t._v("掌握了AST的知识后，我们能做很多事情，各种babel的插件也是这么产生的，只不过用的库不一样。")]),t._v(" "),a("p",[a("strong",[t._v("使用")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://babeljs.io/docs/en/babel-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/parser"),a("OutboundLink")],1),t._v(" ：将 JS 代码解析成对应的 AST，它是使用的 Acorn 来解析 js 代码成 AST 语法树")]),t._v(" "),a("li",[t._v("@babel/traverse：对 AST 节点进行递归遍历")]),t._v(" "),a("li",[t._v("@babel/types：集成了一些快速生成、修改、删除 AST Node的方法")]),t._v(" "),a("li",[t._v("@babel/generator ：根据修改过后的 AST 生成新的 js 代码")])]),t._v(" "),a("p",[t._v("例：将"),a("code",[t._v("const a = 1")]),t._v("中的"),a("code",[t._v("const")]),t._v("修改为"),a("code",[t._v("var")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" generator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/generator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" parser "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/parser"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" traverse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/traverse"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" types "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/types"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.parse 将代码解析为抽象语法树（AST）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2,traverse 转换代码")]),t._v("\n  traverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VariableDeclaration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做一些处理")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n        path为当前访问的路径, 并且包含了节点的信息、父节点信息以及对节点操作许多方法。可以利用这些方法对 AST 进行添加、更新、移动和删除等等。\n        state包含了当前plugin的信息和参数信息等等，并且也可以用来自定义在节点之间传递数据。\n      */")]),t._v("\n      path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kind "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'var'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 const 转换为 var")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. generator 将 AST 转回成代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n    在 transform 阶段处理 AST 结束后，该阶段的任务就是将 AST 转换回 code, 在此期间会对 AST 进行深度优先遍历，根据节点所包含的信息生成对应的代码，并且会生成对应的sourcemap。\n  */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("const a = 1")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'=====newCode'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel插开发用户手册（babel-handbook）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/7012424646247055390",target:"_blank",rel:"noopener noreferrer"}},[t._v("保姆级教学！这次一定学会babel插件开发！"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"ast使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast使用场景"}},[t._v("#")]),t._v(" AST使用场景")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("语法检查、代码风格检查、格式化代码、语法高亮、错误提示、自动补全："),a("code",[t._v("ESlint、Prettier、Vetur")]),t._v("等。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Eslint")]),t._v("对代码错误或风格的检查，发现一些潜在的错误")]),t._v(" "),a("li",[a("code",[t._v("IDE")]),t._v("的错误提示、格式化、高亮、自动补全等")])])]),t._v(" "),a("li",[a("p",[t._v("代码混淆压缩："),a("code",[t._v("uglifyJS")]),t._v("等。")])]),t._v(" "),a("li",[a("p",[t._v("代码转译："),a("code",[t._v("webpack、babel、TypeScript")]),t._v("等。")]),t._v(" "),a("ol",[a("li",[t._v("比如，有个函数 "),a("code",[t._v("function a() {}")]),t._v(" 我想把它变成 "),a("code",[t._v("function b() {}")])]),t._v(" "),a("li",[t._v("比如，在 "),a("code",[t._v("webpack")]),t._v(" 中代码编译完成后 "),a("code",[t._v("require('a') --\x3e __webapck__require__(\"*/**/a.js\")")])])])]),t._v(" "),a("li",[a("p",[t._v("优化变更代码，改变代码结构等")])])]),t._v(" "),a("h4",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/codelittleprince/blog/issues/19",target:"_blank",rel:"noopener noreferrer"}},[t._v("平庸前端码农之蜕变 — AST"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/uVVo27ogrwMUY-6SybzauQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端也要懂编译：AST 从入门到上手指南"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://caibaojian.com/ast.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文助你搞懂 AST"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"sourcemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap"}},[t._v("#")]),t._v(" SourceMap")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("sourceMap")]),t._v("是一项将编译、打包、压缩后的代码映射回源代码的技术，里面储存着位置信息。")])]),t._v(" "),a("p",[t._v("由于打包压缩后的代码并没有阅读性可言，一旦在开发中报错或者遇到问题，直接在混淆代码中"),a("code",[t._v("debug")]),t._v("问题会带来非常糟糕的体验，"),a("code",[t._v("sourceMap")]),t._v("可以帮助我们快速定位到源代码的位置，提高我们的开发效率。"),a("code",[t._v("sourceMap")]),t._v("其实并不是"),a("code",[t._v("Webpack")]),t._v("特有的功能，而是"),a("code",[t._v("Webpack")]),t._v("支持"),a("code",[t._v("sourceMap")]),t._v("，像"),a("code",[t._v("JQuery")]),t._v("也支持"),a("code",[t._v("souceMap")]),t._v("。")]),t._v(" "),a("p",[t._v("既然是一种源码的映射，那必然就需要有一份映射的文件，来标记混淆代码里对应的源码的位置，通常这份映射文件以"),a("code",[t._v(".map")]),t._v("结尾，这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。")]),t._v(" "),a("p",[t._v("有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。")]),t._v(" "),a("p",[t._v("里边的数据结构大概长这样：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//SourceMap的版本，目前为3")]),t._v("\n    sources"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换前的文件，该项是一个数组，表示可能存在多个文件合并")]),t._v("\n    names"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"are"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换前的所有变量名和属性名")]),t._v("\n    mappings"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AACvB,gBAAgB,EAAE;AAClB;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//记录位置信息的字符串")]),t._v("\n    file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"out.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换后的文件名")]),t._v("\n    sourcesContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t// The module cache\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换前的文件内容列表，与sources列表依次对应")]),t._v("\n    sourceRoot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"mappings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mappings"}},[t._v("#")]),t._v(" mappings")]),t._v(" "),a("p",[a("code",[t._v("mappings")]),t._v("是记录位置信息的字符串, 它的数据遵循以下规则：")]),t._v(" "),a("ul",[a("li",[t._v("每个分号对应转换后源码的一行；")]),t._v(" "),a("li",[t._v("每个逗号对应转换后源码的一个位置；")]),t._v(" "),a("li",[t._v("每个段由1、4或5个可变长度字段组成;")])]),t._v(" "),a("blockquote",[a("p",[t._v("如上"),a("code",[t._v("AACvB")]),t._v("代表该位置转换前的源码位置，以"),a("code",[t._v("VLQ")]),t._v("编码表示；")])]),t._v(" "),a("p",[a("code",[t._v("VLQ")]),t._v("是"),a("code",[t._v("Variable-length quantity")]),t._v(" 的缩写，是一种通用的、使用任意位数的二进制来表示一个任意大的数字的一种编码方式。")]),t._v(" "),a("blockquote",[a("p",[t._v("关于"),a("code",[t._v("sourceMap")]),t._v("映射表的生成有一套较为复杂的规则，具体可参考这里: "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000020213957",target:"_blank",rel:"noopener noreferrer"}},[t._v("【JS基础】sourceMap是个啥"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("有了这份映射文件，我们只需要在我们的压缩代码的最末端加上这句注释，即可让sourceMap生效：")]),t._v(" "),a("p",[a("code",[t._v("//# sourceURL=/path/to/file.js.map")])]),t._v(" "),a("p",[t._v("有了这段注释后，浏览器就会通过"),a("code",[t._v("sourceURL")]),t._v("去获取这份映射文件，通过解释器解析后，实现源码和混淆代码之间的映射。因此"),a("code",[t._v("sourceMap")]),t._v("其实也是一项需要浏览器支持的技术。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果我们仔细查看"),a("code",[t._v("webpack")]),t._v("打包出来的"),a("code",[t._v("bundle")]),t._v("文件，就可以发现在默认的"),a("code",[t._v("development")]),t._v("开发模式下，每个"),a("code",[t._v("_webpack_modules__")]),t._v("文件模块的代码最末端，都会加上"),a("code",[t._v("//# sourceURL=webpack://file-path?")]),t._v("，从而实现对"),a("code",[t._v("sourceMap")]),t._v("的支持。")])]),t._v(" "),a("h4",{attrs:{id:"webpack-中的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-中的使用"}},[t._v("#")]),t._v(" Webpack 中的使用")]),t._v(" "),a("p",[a("code",[t._v("Webpack")]),t._v(" 中是通过 "),a("code",[t._v("Devtool")]),t._v(" 来控制是否生成，以及如何生成 "),a("code",[t._v("source map")]),t._v("。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://webpack.docschina.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Devtool"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.dev.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// devtool:'eval', // 不单独生成.map文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// devtool:'cheap-source-map', // 只能定义行的信息，定位不到列的信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devtool")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source-map'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单独生成.map文件 可定位到源代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// devtool: 'cheap-module-eval-source-map', // 这是 \"cheap(低开销)\" 的 source map，因为它没有生成列映射(column mapping)，只是映射行数。")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("source-map")]),t._v("：外部。可以查看错误代码准确信息和源代码的错误位置。")]),t._v(" "),a("li",[a("code",[t._v("inline-source-map")]),t._v("：内联。只生成一个内联 Source Map，可以查看错误代码准确信息和源代码的错误位置")]),t._v(" "),a("li",[a("code",[t._v("hidden-source-map")]),t._v("：外部。可以查看错误代码准确信息，但不能追踪源代码错误，只能提示到构建后代码的错误位置。")]),t._v(" "),a("li",[a("code",[t._v("eval-source-map")]),t._v("：内联。每一个文件都生成对应的 Source Map，都在 eval 中，可以查看错误代码准确信息 和 源代码的错误位置。")]),t._v(" "),a("li",[a("code",[t._v("nosources-source-map")]),t._v("：外部。可以查看错误代码错误原因，但不能查看错误代码准确信息，并且没有任何源代码信息。")]),t._v(" "),a("li",[a("code",[t._v("cheap-source-map")]),t._v("：外部。可以查看错误代码准确信息和源代码的错误位置，只能把错误精确到整行，忽略列。")]),t._v(" "),a("li",[a("code",[t._v("cheap-module-source-map")]),t._v("：外部。可以错误代码准确信息和源代码的错误位置，module 会加入 loader 的 Source Map。")])])]),t._v(" "),a("ul",[a("li",[t._v("开发环境：需要考虑速度快，调试更友好")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("eval-source-map")]),t._v("（完整度高，内联速度快）、 "),a("code",[t._v("eval-cheap-module-souce-map")]),t._v("（错误提示忽略列但是包含其他信息，内联速度快）")])]),t._v(" "),a("ul",[a("li",[t._v("生产环境：需要考虑源代码要不要隐藏，调试要不要更友好")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("hidden-source-map")]),t._v(" 只隐藏源代码，会提示构建后代码错误信息、"),a("code",[t._v("cheap-module-souce-map")]),t._v("（错误提示一整行忽略列）")])]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://juejin.cn/post/7023537118454480904",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出之 Source Map"),a("OutboundLink")],1)]),t._v(" "),a("fix-link",{attrs:{label:"Back",href:"/skills/webpack/"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);